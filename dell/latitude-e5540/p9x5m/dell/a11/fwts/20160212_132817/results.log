Results generated by fwts: Version V16.01.00 (2016-01-13 08:23:12).

Some of this work - Copyright (c) 1999 - 2016, Intel Corp. All rights reserved.
Some of this work - Copyright (c) 2010 - 2016, Canonical.

This test run on 12/02/16 at 13:28:17 on host Linux fwts-live 4.2.0-18-generic
#22~14.04.1-Ubuntu SMP Fri Nov 6 22:20:11 UTC 2015 x86_64.

Command: "fwts --force-clean --skip-test=s3 --batch --uefitests
--show-progress-dialog --log-type plaintext".
Running tests: version bios_info oops klog mtrr acpiinfo uefirtauthvar
uefibootpath securebootcert uefirtmisc uefirtvariable uefirttime csm maxreadreq
crs aspm dmicheck microcode msr nx cpufreq maxfreq virt pnp pciirq mpcheck
hda_audio ebda bios32 apicedge xenv xsdt wmi wdat wakealarm waet uefi tpm2 tcpa
syntaxcheck stao srat spmi spcr slit slic sbst rsdt rsdp pcc osilinux method
msdm mchi mcfg madt lpit iort hpet hest gtdt fpdt fan fadt facs erst ecdt dmar
dbg2 dbgp cstates csrt cpep checksum autobrightness boot bgrt bert aspt asf
apicinstance acpitables.

version: Gather kernel system information.
--------------------------------------------------------------------------------
Test 1 of 4: Gather kernel signature.
Signature: Ubuntu 4.2.0-18.22~14.04.1-generic 4.2.3

Test 2 of 4: Gather kernel system information.
Kernel Version: Linux version 4.2.0-18-generic (buildd@lgw01-55) (gcc version
4.8.2 (Ubuntu 4.8.2-19ubuntu1) ) #22~14.04.1-Ubuntu SMP Fri Nov 6 22:20:11 UTC
2015

Test 3 of 4: Gather kernel boot command line.
Kernel boot command line: initrd=/casper/initrd.lz boot=casper config
ip=frommedia persistent noprompt splash quiet FWTS_AUTO_SHUTDOWN=1
username=ubuntu hostname=fwts-live quiet BOOT_IMAGE=/casper/vmlinuz

Test 4 of 4: Gather ACPI driver version.
ACPI Version: 20150619

================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 4 info only.
================================================================================

bios_info: Gather BIOS DMI information.
--------------------------------------------------------------------------------
Test 1 of 1: Gather BIOS DMI information
BIOS Vendor       : Dell Inc.
BIOS Version      : A11
BIOS Release Date : 02/02/2015
Board Name        : 
Board Serial #    : removed
Board Version     : 
Board Asset Tag   : 
Chassis Serial #  : removed
Chassis Type      : 9
Chassis Vendor    : Dell Inc.
Chassis Version   : 
Chassic Asset Tag : 
Product Name      : Latitude E5540
Product Serial #  : removed
Product UUID      : removed
Product Version   : 01
System Vendor     : Dell Inc.

================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 1 info only.
================================================================================

oops: Scan kernel log for Oopses.
--------------------------------------------------------------------------------
Test 1 of 1: Kernel log oops check.
PASSED: Test 1, Found no oopses in kernel log.
PASSED: Test 1, Found no WARN_ON warnings in kernel log.

================================================================================
2 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

klog: Scan kernel log for errors and warnings.
--------------------------------------------------------------------------------
Test 1 of 1: Kernel log error check.
Kernel message: [ 0.013617] ENERGY_PERF_BIAS: Set to 'normal', was 'performance'

ADVICE: This is not exactly a failure but a warning from the kernel. The
MSR_IA32_ENERGY_PERF_BIAS was initialized and defaulted to a high performance
bias setting. The kernel has detected this and changed it down to a 'normal'
bias setting.

Kernel message: [ 0.111703] [Firmware Bug]: ACPI: BIOS _OSI(Linux) query ignored

ADVICE: This is not exactly a failure mode but a warning from the kernel. The
_OSI() method has implemented a match to the 'Linux' query in the DSDT and this
is redundant because the ACPI driver matches onto the Windows _OSI strings by
default.

Kernel message: [ 0.118462] ACPI Exception: AE_NOT_FOUND, While evaluating Sleep
State [\_S1_] (20150619/hwxface-580)

ADVICE: The exception comes from kernel cannot find _S1 namespace object that
contains the register values for the sleep state when kernel would like to setup
all the sleep state information. This means that the kernel does not know how to
enter the S1 sleep state, however, it should not be a problem if the S1 sleep
state isn't supported intentionally.

Kernel message: [ 0.118467] ACPI Exception: AE_NOT_FOUND, While evaluating Sleep
State [\_S2_] (20150619/hwxface-580)

ADVICE: The exception comes from kernel cannot find _S2 namespace object that
contains the register values for the sleep state when kernel would like to setup
all the sleep state information. This means that the kernel does not know how to
enter the S2 sleep state, however, it should not be a problem if the S2 sleep
state isn't supported intentionally.

PASSED: Test 1, Found no errors in kernel log.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

mtrr: MTRR tests.
--------------------------------------------------------------------------------
MTRR overview
-------------
Reg 0: 0x0000000000000000 - 0x0000000080000000 (  2048 MB)   Write-Back
Reg 1: 0x0000000080000000 - 0x00000000c0000000 (  1024 MB)   Write-Back
Reg 2: 0x00000000c0000000 - 0x00000000e0000000 (   512 MB)   Write-Back
Reg 3: 0x00000000dd000000 - 0x00000000de000000 (    16 MB)   Uncached
Reg 4: 0x00000000de000000 - 0x00000000e0000000 (    32 MB)   Uncached
Reg 5: 0x0000000100000000 - 0x0000000200000000 (  4096 MB)   Write-Back
Reg 6: 0x0000000200000000 - 0x0000000220000000 (   512 MB)   Write-Back
Reg 7: 0x000000021ee00000 - 0x000000021f000000 (     2 MB)   Uncached
Reg 8: 0x000000021f000000 - 0x0000000220000000 (    16 MB)   Uncached

Test 1 of 3: Validate the kernel MTRR IOMEM setup.
PASSED: Test 1, Memory ranges seem to have correct attributes.

Test 2 of 3: Validate the MTRR setup across all processors.
PASSED: Test 2, All processors have the a consistent MTRR setup.

Test 3 of 3: Test for AMD MtrrFixDramModEn being cleared by the BIOS.
SKIPPED: Test 3, CPU is not an AMD, cannot test.

================================================================================
2 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

acpiinfo: General ACPI information test.
--------------------------------------------------------------------------------
Test 1 of 3: Determine Kernel ACPI version.
Kernel ACPICA driver version: 20150619, supports ACPI 5.0

Test 2 of 3: Determine machine's ACPI version.
FADT X_FIRMWARE_CTRL 64 bit pointer was zero, falling back to using
FIRMWARE_CTRL 32 bit pointer.
FACP ACPI Version: 5.0 

Test 3 of 3: Determine AML compiler.
Determine the compiler used to generate the ACPI AML in the DSDT and SSDT.
Table DSDT, OEM DELL , created with INTL (Intel) compiler.
Table SSDT0, OEM INTEL, created with INTL (Intel) compiler.
Table SSDT1, OEM Intel, created with INTL (Intel) compiler.
Table SSDT2, OEM PmRef, created with INTL (Intel) compiler.
Table SSDT3, OEM PmRef, created with INTL (Intel) compiler.
Table SSDT4, OEM SataRe, created with INTL (Intel) compiler.

================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 3 info only.
================================================================================

uefirtauthvar: Authenticated variable tests.
--------------------------------------------------------------------------------
Cannot detect any UEFI firmware. Aborted.
Aborted test, initialisation failed.
================================================================================
0 passed, 0 failed, 0 warning, 12 aborted, 0 skipped, 0 info only.
================================================================================

uefibootpath: Sanity check for UEFI Boot Path Boot####.
--------------------------------------------------------------------------------
Cannot detect any UEFI firmware. Aborted.
Aborted test, initialisation failed.
================================================================================
0 passed, 0 failed, 0 warning, 1 aborted, 0 skipped, 0 info only.
================================================================================

securebootcert: UEFI secure boot test.
--------------------------------------------------------------------------------
Cannot detect any UEFI firmware. Aborted.
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

uefirtmisc: UEFI miscellaneous runtime service interface tests.
--------------------------------------------------------------------------------
Cannot detect any UEFI firmware. Aborted.
Aborted test, initialisation failed.
================================================================================
0 passed, 0 failed, 0 warning, 3 aborted, 0 skipped, 0 info only.
================================================================================

uefirtvariable: UEFI Runtime service variable interface tests.
--------------------------------------------------------------------------------
Cannot detect any UEFI firmware. Aborted.
Aborted test, initialisation failed.
================================================================================
0 passed, 0 failed, 0 warning, 8 aborted, 0 skipped, 0 info only.
================================================================================

uefirttime: UEFI Runtime service time interface tests.
--------------------------------------------------------------------------------
Cannot detect any UEFI firmware. Aborted.
Aborted test, initialisation failed.
================================================================================
0 passed, 0 failed, 0 warning, 35 aborted, 0 skipped, 0 info only.
================================================================================

csm: UEFI Compatibility Support Module test.
--------------------------------------------------------------------------------
Test 1 of 1: UEFI Compatibility Support Module test.
Checking for UEFI Compatibility Support Module (CSM)
Int 10h jumps to 0xc0014 in option ROM at: 0xc0000..0xcec00
No CSM: Legacy BIOS firmware has video option ROM with Int 10h support.

================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 1 info only.
================================================================================

maxreadreq: Test firmware has set PCI Express MaxReadReq to a higher value on
non-motherboard devices.
--------------------------------------------------------------------------------
Test 1 of 1: Test firmware settings MaxReadReq for PCI Express devices.
MaxReadReq for 0000:01:00.0 is low (128).
FAILED [LOW] LowMaxReadReq: Test 1, 1 devices have low MaxReadReq settings.
Firmware may have configured these too low.

ADVICE: The MaxReadRequest size is set too low and will affect performance. It
will provide excellent bus sharing at the cost of bus data transfer rates.
Although not a critical issue, it may be worth considering setting the
MaxReadRequest size to 256 or 512 to increase throughput on the PCI Express bus.
Some drivers (for example the Brocade Fibre Channel driver) allow one to
override the firmware settings. Where possible, this BIOS configuration setting
is worth increasing it a little more for better performance at a small reduction
of bus sharing.


================================================================================
0 passed, 1 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

crs: Test PCI host bridge configuration using _CRS.
--------------------------------------------------------------------------------
Test 1 of 1: Test PCI host bridge configuration using _CRS.
PASSED: Test 1, The kernel has detected a BIOS newer than the end of 2007 (2/2
/2015) and has assumed that your BIOS can correctly specify the host bridge MMIO
aperture using _CRS. If this does not work correctly you can override this by
booting with "pci=nocrs".

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

aspm: PCIe ASPM test.
--------------------------------------------------------------------------------
Test 1 of 2: PCIe ASPM ACPI test.
PCIe ASPM is not controlled by Linux kernel.

ADVICE: BIOS reports that Linux kernel should not modify ASPM settings that BIOS
configured. It can be intentional because hardware vendors identified some
capability bugs between the motherboard and the add-on cards.


Test 2 of 2: PCIe ASPM registers test.
PASSED: Test 2, PCIe ASPM setting matched was matched.
WARNING: Test 2, RP 00h:1Ch.03h L0s not enabled.
WARNING: Test 2, Device 02h:00h.00h L0s not enabled.

ADVICE: The ASPM L0s low power Link state is optimized for short entry and exit
latencies, while providing substantial power savings. Disabling L0s of a PCIe
device may increases power consumption, and will impact the battery life of a
mobile system.

PASSED: Test 2, PCIe ASPM setting matched was matched.

================================================================================
2 passed, 0 failed, 2 warnings, 0 aborted, 0 skipped, 0 info only.
================================================================================

dmicheck: DMI/SMBIOS table tests.
--------------------------------------------------------------------------------
Test 1 of 3: Find and test SMBIOS Table Entry Points.
This test tries to find and sanity check the SMBIOS data structures.
PASSED: Test 1, Found SMBIOS Table Entry Point at 0xf04c0
SMBIOS Entry Point Structure:
  Anchor String          : _SM_
  Checksum               : 0x7d
  Entry Point Length     : 0x1f
  Major Version          : 0x02
  Minor Version          : 0x07
  Maximum Struct Size    : 0xfd
  Entry Point Revision   : 0x00
  Formatted Area         : 0x00 0x00 0x00 0x00 0x00
  Intermediate Anchor    : _DMI_
  Intermediate Checksum  : 0x58
  Structure Table Length : 0x120e
  Structure Table Address: 0x000ecb90
  # of SMBIOS Structures : 0x0060
  SBMIOS BCD Revision    : 27

PASSED: Test 1, SMBIOS Table Entry Point Checksum is valid.
PASSED: Test 1, SMBIOS Table Entry Point Length is valid.
PASSED: Test 1, SMBIOS Table Entry Intermediate Anchor String _DMI_ is valid.
PASSED: Test 1, SMBIOS Table Entry Point Intermediate Checksum is valid.
PASSED: Test 1, SMBIOS Table Entry Structure Table Address and Length looks
valid.

Test 2 of 3: Test DMI/SMBIOS tables for errors.
PASSED: Test 2, Entry @ 0x000ecb90 'Unknown (Type 218)'
PASSED: Test 2, Entry @ 0x000ecc8d 'Unknown (Type 218)'
PASSED: Test 2, Entry @ 0x000ecd8a 'Unknown (Type 218)'
PASSED: Test 2, Entry @ 0x000ece87 'Unknown (Type 218)'
PASSED: Test 2, Entry @ 0x000ecf84 'Unknown (Type 218)'
PASSED: Test 2, Entry @ 0x000ed081 'Unknown (Type 218)'
PASSED: Test 2, Entry @ 0x000ed130 'Unknown (Type 218)'
PASSED: Test 2, Entry @ 0x000ed161 'BIOS Information (Type 0)'
PASSED: Test 2, Entry @ 0x000ed193 'System Information (Type 1)'
PASSED: Test 2, Entry @ 0x000ed1e4 'Base Board Information (Type 2)'
FAILED [LOW] DMISerialNumber: Test 2, String index 0x05 in table entry 'Chassis
Information (Type 3)' @ 0x000ed226, field 'SKU Number', offset 0x15 has a
default value 'To be filled by O.E.M.' and probably has not been updated by the
BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.


ADVICE: It may be worth checking against section 7.4 of the System Management
BIOS (SMBIOS) Reference Specification (see http://www.dmtf.org/standards
/smbios).

FAILED [LOW] DMIAssetTag: Test 2, String index 0x04 in table entry 'Processor
Information (Type 4)' @ 0x000ed26a, field 'Asset Tag', offset 0x21 has a default
value 'Fill By OEM' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.

FAILED [LOW] DMIAssetTag: Test 2, String index 0x05 in table entry 'Processor
Information (Type 4)' @ 0x000ed26a, field 'Part Number', offset 0x22 has a
default value 'Fill By OEM' and probably has not been updated by the BIOS
vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.


ADVICE: It may be worth checking against section 7.5 of the System Management
BIOS (SMBIOS) Reference Specification (see http://www.dmtf.org/standards
/smbios).

PASSED: Test 2, Entry @ 0x000ed2e5 'Cache Information (Type 7)'
PASSED: Test 2, Entry @ 0x000ed309 'Cache Information (Type 7)'
PASSED: Test 2, Entry @ 0x000ed32d 'Cache Information (Type 7)'
PASSED: Test 2, Entry @ 0x000ed351 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed369 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed381 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed397 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed3ad 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed3c3 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed3d7 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed3eb 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed3ff 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed412 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed426 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed43f 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed462 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed47b 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed495 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed4af 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed4c4 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed4e0 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed4fc 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed51d 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed53a 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed559 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed572 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed588 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed5a1 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed5ba 'Port Connector Information (Type 8)'
PASSED: Test 2, Entry @ 0x000ed5d3 'System Slot Information (Type 9)'
PASSED: Test 2, Entry @ 0x000ed5ea 'System Slot Information (Type 9)'
PASSED: Test 2, Entry @ 0x000ed601 'System Slot Information (Type 9)'
PASSED: Test 2, Entry @ 0x000ed618 'System Slot Information (Type 9)'
PASSED: Test 2, Entry @ 0x000ed62f 'System Slot Information (Type 9)'
PASSED: Test 2, Entry @ 0x000ed646 'On Board Devices (Type 10)'
PASSED: Test 2, Entry @ 0x000ed661 'OEM Strings (Type 11)'
FAILED [LOW] DMISerialNumber: Test 2, String index 0x01 in table entry 'System
Configuration Options (Type 12)' @ 0x000ed6a1, field 'Option 1', offset 0x04 has
a default value 'To Be Filled By O.E.M.' and probably has not been updated by
the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.


ADVICE: It may be worth checking against section 7.13 of the System Management
BIOS (SMBIOS) Reference Specification (see http://www.dmtf.org/standards
/smbios).

PASSED: Test 2, Entry @ 0x000ed6be 'BIOS Language Information (Type 13)'
PASSED: Test 2, Entry @ 0x000ed6e5 'System Event Log (Type 15)'
PASSED: Test 2, Entry @ 0x000ed70a 'Physical Memory Array (Type 16)'
PASSED: Test 2, Entry @ 0x000ed723 'Memory Device (Type 17)'
FAILED [LOW] DMISerialNumber: Test 2, String index 0x02 in table entry 'Memory
Device (Type 17)' @ 0x000ed780, field 'Manufacturer', offset 0x17 has a default
value '[Empty]' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.

FAILED [LOW] DMISerialNumber: Test 2, String index 0x03 in table entry 'Memory
Device (Type 17)' @ 0x000ed780, field 'Serial Number', offset 0x18 has a default
value '[Empty]' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.

FAILED [LOW] DMISerialNumber: Test 2, String index 0x04 in table entry 'Memory
Device (Type 17)' @ 0x000ed780, field 'Asset Tag', offset 0x19 has a default
value '00000000' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.

FAILED [LOW] DMISerialNumber: Test 2, String index 0x05 in table entry 'Memory
Device (Type 17)' @ 0x000ed780, field 'Part Number', offset 0x1a has a default
value '[Empty]' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.


ADVICE: It may be worth checking against section 7.18 of the System Management
BIOS (SMBIOS) Reference Specification (see http://www.dmtf.org/standards
/smbios).

PASSED: Test 2, Entry @ 0x000ed7cb 'Memory Array Mapped Address (Type 19)'
PASSED: Test 2, Entry @ 0x000ed7ec 'Memory Device Mapped Address (Type 20)'
PASSED: Test 2, Entry @ 0x000ed801 'Built-in Pointing Device (Type 21)'
PASSED: Test 2, Entry @ 0x000ed80a 'Portable Battery (Type 22)'
PASSED: Test 2, Entry @ 0x000ed883 'Hardware Security (Type 24)'
PASSED: Test 2, Entry @ 0x000ed88a 'System Power Controls (Type 25)'
PASSED: Test 2, Entry @ 0x000ed895 'Cooling Device (Type 27)'
PASSED: Test 2, Entry @ 0x000ed8c5 'Temperature Probe (Type 28)'
PASSED: Test 2, Entry @ 0x000ed8fc 'Temperature Probe (Type 28)'
PASSED: Test 2, Entry @ 0x000ed933 'Temperature Probe (Type 28)'
PASSED: Test 2, Entry @ 0x000ed96a 'Temperature Probe (Type 28)'
PASSED: Test 2, Entry @ 0x000ed9a1 'System Boot Information (Type 32)'
PASSED: Test 2, Entry @ 0x000ed9b7 'Management Device (Type 34)'
PASSED: Test 2, Entry @ 0x000ed9ca 'Management Device Threshold Data (Type 36)'
PASSED: Test 2, Entry @ 0x000ed9dc 'Management Device Threshold Data (Type 36)'
PASSED: Test 2, Entry @ 0x000ed9ee 'Management Device Threshold Data (Type 36)'
PASSED: Test 2, Entry @ 0x000eda00 'Management Device Threshold Data (Type 36)'
PASSED: Test 2, Entry @ 0x000eda12 'Management Device Threshold Data (Type 36)'
PASSED: Test 2, Entry @ 0x000eda24 'Onboard Device (Type 41)'
PASSED: Test 2, Entry @ 0x000eda3d 'Onboard Device (Type 41)'
PASSED: Test 2, Entry @ 0x000eda56 'Onboard Device (Type 41)'
PASSED: Test 2, Entry @ 0x000eda70 'Inactive (Type 126)'
PASSED: Test 2, Entry @ 0x000edae9 'Unknown (Type 130)'
PASSED: Test 2, Entry @ 0x000edaff 'Unknown (Type 131)'
PASSED: Test 2, Entry @ 0x000edb41 'Unknown (Type 136)'
PASSED: Test 2, Entry @ 0x000edb49 'Unknown (Type 177)'
PASSED: Test 2, Entry @ 0x000edb57 'Unknown (Type 178)'
PASSED: Test 2, Entry @ 0x000edbd5 'Unknown (Type 208)'
PASSED: Test 2, Entry @ 0x000edbe7 'Unknown (Type 209)'
PASSED: Test 2, Entry @ 0x000edbf5 'Unknown (Type 210)'
PASSED: Test 2, Entry @ 0x000edc03 'Unknown (Type 216)'
PASSED: Test 2, Entry @ 0x000edc22 'Unknown (Type 217)'
PASSED: Test 2, Entry @ 0x000edc3e 'Unknown (Type 219)'
PASSED: Test 2, Entry @ 0x000edc91 'Unknown (Type 219)'
PASSED: Test 2, Entry @ 0x000edce4 'Unknown (Type 220)'
PASSED: Test 2, Entry @ 0x000edcfa 'Unknown (Type 220)'
PASSED: Test 2, Entry @ 0x000edd10 'Unknown (Type 220)'
PASSED: Test 2, Entry @ 0x000edd26 'Unknown (Type 220)'
PASSED: Test 2, Entry @ 0x000edd3c 'Unknown (Type 221)'
PASSED: Test 2, Entry @ 0x000edd51 'Unknown (Type 222)'
PASSED: Test 2, Entry @ 0x000edd63 'Unknown (Type 255)'
PASSED: Test 2, Entry @ 0x000edd98 'End of Table (Type 127)'

Test 3 of 3: Test DMI/SMBIOS3 tables for errors.
SKIPPED: Test 3, Cannot find SMBIOS30 table entry, skip the test.

================================================================================
98 passed, 8 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

microcode: Test if system is using latest microcode.
--------------------------------------------------------------------------------
Test 1 of 1: Test for most recent microcode being loaded.
This test verifies if the firmware has put a recent revision of the microcode
into the processor at boot time. Recent microcode is important to have all the
required features and errata updates for the processor.
The kernel did not report that CPU 0 has had a microcode update. The current
firmware is revision 0x1c and probably has not been updated.
The kernel did not report that CPU 1 has had a microcode update. The current
firmware is revision 0x1c and probably has not been updated.
The kernel did not report that CPU 2 has had a microcode update. The current
firmware is revision 0x1c and probably has not been updated.
The kernel did not report that CPU 3 has had a microcode update. The current
firmware is revision 0x1c and probably has not been updated.
SKIPPED: Test 1, Could not determine from kernel log if latest microcode has
been loaded.

================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

msr: MSR register tests.
--------------------------------------------------------------------------------
Test 1 of 5: Test CPU generic MSRs.
PASSED: Test 1, MSR 0x00000001 P5_MC_TYPE is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000006 MONITOR_FILTER_SIZE is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000017 PLATFORM_ID is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000002a EBL_CR_POWERON is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000001b APIC_BASE is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000003a FEATURE_CONTROL is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000008b BIOS_SIGN_ID is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x000000fe MTRRCAP is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000174 SYSENTER_CS is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000175 SYSENTER_ESP is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000176 SYSENTER_EIP is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000179 MCG_CAP is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000017a MCG_STATUS is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000019a CLOCK_MODULATION is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000019b THERM_INTERRUPT is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x000001a0 MISC_ENABLE is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x000001b2 PACKAGE_THERM_INTERRUPT is consistent across 4
CPUs.
PASSED: Test 1, MSR 0x000001f2 SMRR_PHYSBASE is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x000001f3 SMRR_PHYSMASK is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000200 MTRR_PHYSBASE0 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000201 MTRR_PHYSMASK0 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000202 MTRR_PHYSBASE1 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000203 MTRR_PHYSMASK1 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000204 MTRR_PHYSBASE2 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000205 MTRR_PHYSMASK2 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000206 MTRR_PHYSBASE3 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000207 MTRR_PHYSMASK3 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000208 MTRR_PHYSBASE4 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000209 MTRR_PHYSMASK4 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000020a MTRR_PHYSBASE5 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000020b MTRR_PHYSMASK5 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000020c MTRR_PHYSBASE6 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000020d MTRR_PHYSMASK6 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000020e MTRR_PHYSBASE7 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000020f MTRR_PHYSMASK7 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000210 MTRR_PHYSBASE8 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000211 MTRR_PHYSMASK8 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000212 MTRR_PHYSBASE9 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000213 MTRR_PHYSMASK9 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000250 MTRR_FIX64K_000 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000258 MTRR_FIX16K_800 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000259 MTRR_FIX16K_a00 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000268 MTRR_FIX4K_C000 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000269 MTRR_FIX4K_C800 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000026a MTRR_FIX4K_D000 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000026b MTRR_FIX4K_D800 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000026c MTRR_FIX4K_E000 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000026d MTRR_FIX4K_E800 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000026e MTRR_FIX4K_F000 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000026f MTRR_FIX4K_F800 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000277 PAT is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000280 MC0_CTL2 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000281 MC1_CTL2 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000282 MC2_CTL2 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000283 MC3_CTL2 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000284 MC4_CTL2 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000285 MC5_CTL2 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000286 MC6_CTL2 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x000002ff MTRR_DEF_TYPE is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x000003f1 PEBS_ENABLE is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000480 VMX_BASIC is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000481 VMX_PINPASED_CTLS is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000482 VMX_PROCBASED_CTLS is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000483 VMX_EXIT_CTLS is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000484 VMX_ENTRY_CTLS is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000485 VMX_MISC is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000486 VMX_CR0_FIXED0 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000487 VMX_CR0_FIXED1 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000488 VMX_CR4_FIXED0 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000489 VMX_CR4_FIXED1 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000048a VMX_VMX_VMCS_ENUM is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000048b VMX_PROCBASED_CTLS2 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000048c VMX_EPT_VPID_CAP is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000048d VMX_TRUE_PINBASED_CTLS is consistent across 4
CPUs.
PASSED: Test 1, MSR 0x0000048e VMX_TRUE_PROCBASED_CTLS is consistent across 4
CPUs.
PASSED: Test 1, MSR 0x0000048f VMX_TRUE_EXIT_CTLS is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000490 VMX_TRUE_ENTRY_CTLS is consistent across 4 CPUs.
PASSED: Test 1, MSR 0xc0000080 EFER is consistent across 4 CPUs.
PASSED: Test 1, MSR 0xc0000081 STAR is consistent across 4 CPUs.
PASSED: Test 1, MSR 0xc0000082 LSTAR is consistent across 4 CPUs.
PASSED: Test 1, MSR 0xc0000084 FMASK is consistent across 4 CPUs.
PASSED: Test 1, MSR 0xc0000102 KERNEL_GS_BASE is consistent across 4 CPUs.

Test 2 of 5: Test CPU specific model MSRs.
CPU family: 0x6, model: 0x45 (Haswell)
PASSED: Test 2, MSR 0x000000ce MSR_PLATFORM_INFO is consistent across 4 CPUs.
PASSED: Test 2, MSR 0x0000003b IA32_TSC_ADJUST is consistent across 4 CPUs.
PASSED: Test 2, MSR 0x00000186 IA32_PERFEVTSEL0 is consistent across 4 CPUs.
PASSED: Test 2, MSR 0x00000187 IA32_PERFEVTSEL1 is consistent across 4 CPUs.
PASSED: Test 2, MSR 0x00000188 IA32_PERFEVTSEL2 is consistent across 4 CPUs.
PASSED: Test 2, MSR 0x00000189 IA32_PERFEVTSEL3 is consistent across 4 CPUs.
PASSED: Test 2, MSR 0x00000648 MSR_CONFIG_TDP_NOMINAL is consistent across 4
CPUs.
PASSED: Test 2, MSR 0x00000649 MSR_CONFIG_TDP_LEVEL1 is consistent across 4
CPUs.
PASSED: Test 2, MSR 0x0000064a MSR_CONFIG_TDP_LEVEL2 is consistent across 4
CPUs.
PASSED: Test 2, MSR 0x0000064b MSR_CONFIG_TDP_CONTROL is consistent across 4
CPUs.
PASSED: Test 2, MSR 0x0000064c MSR_TURBO_ACTIVATION_RATIO is consistent across 4
CPUs.
PASSED: Test 2, MSR 0x00000630 MSR_PKG_C8_RESIDENCY is consistent across 4 CPUs.
PASSED: Test 2, MSR 0x00000630 MSR_PKG_C9_RESIDENCY is consistent across 4 CPUs.
PASSED: Test 2, MSR 0x00000630 MSR_PKG_C10_RESIDENCY is consistent across 4
CPUs.
PASSED: Test 2, MSR 0x000001ad MSR_TURBO_RATIO_LIMIT is consistent across 4
CPUs.
PASSED: Test 2, MSR 0x00000391 MSR_UNC_PERF_GLOBAL_CTRL is consistent across 4
CPUs.
PASSED: Test 2, MSR 0x00000394 MSR_UNC_PERF_FIXED_CTRL is consistent across 4
CPUs.
PASSED: Test 2, MSR 0x00000396 MSR_UNC_CB0_CONFIG is consistent across 4 CPUs.
PASSED: Test 2, MSR 0x00000391 MSR_UNC_PERF_GLOBAL_CTRL is consistent across 4
CPUs.
PASSED: Test 2, MSR 0x00000395 MSR_UNC_PERF_FIXED_CTR is consistent across 4
CPUs.
PASSED: Test 2, MSR 0x000004e0 MSR_SMM_FEATURE_CONTROL is consistent across 4
CPUs.
PASSED: Test 2, MSR 0x000004e2 MSR_SMM_DELAYED is consistent across 4 CPUs.
PASSED: Test 2, MSR 0x000004e3 MSR_SMM_BLOCKED is consistent across 4 CPUs.
PASSED: Test 2, MSR 0x00000640 MSR_PP1_POWER_LIMIT is consistent across 4 CPUs.
PASSED: Test 2, MSR 0x00000641 MSR_PP1_ENERGY_STATUS is consistent across 4
CPUs.

Test 3 of 5: Test all P State Ratios.
PASSED: Test 3, MSR 0x000000ce Minimum P-State is consistent across 4 CPUs.
PASSED: Test 3, MSR 0x000000ce Maximum P-State is consistent across 4 CPUs.

Test 4 of 5: Test C1 and C3 autodemotion.
PASSED: Test 4, MSR 0x000000e2 C1 and C3 Autodemotion is consistent across 4
CPUs.
C1 and C3 Autodemotion enabled.

Test 5 of 5: Test SMRR MSR registers.
PASSED: Test 5, MSR 0x000001f2 SMRR_PHYSBASE is consistent across 4 CPUs.
PASSED: Test 5, MSR 0x000001f2 SMRR_TYPE is consistent across 4 CPUs.
PASSED: Test 5, MSR 0x000001f3 SMRR_PHYSMASK is consistent across 4 CPUs.
PASSED: Test 5, MSR 0x000001f3 SMRR_VALID is consistent across 4 CPUs.

================================================================================
114 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

nx: Test if CPU NX is disabled by the BIOS.
--------------------------------------------------------------------------------
Test 1 of 3: Test CPU NX capability.
PASSED: Test 1, CPU has NX flags, BIOS is not disabling it.

Test 2 of 3: Test all CPUs have same BIOS set NX flag.
This test verifies that all CPUs have the same NX flag setting. Although rare,
BIOS may set the NX flag differently per CPU. 
PASSED: Test 2, All 4 CPUs have the same NX flag set.

Test 3 of 3: Test all CPUs have same msr setting in MSR 0x1a0.
This test verifies that all CPUs have the same NX flag setting by examining the
per CPU MSR register 0x1a0.
PASSED: Test 3, All 4 CPUs have the NX flag in MSR 0x1a0 set.

================================================================================
3 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

cpufreq: CPU frequency scaling tests.
--------------------------------------------------------------------------------
WARNING: Test 1, Cannot set CPU 0 governor to userspace.
Failed to intialise cpufreq to set CPU speed
Test 1 of 7: CPU frequency table consistency
PASSED: Test 1, CPU frequency tables are consistent

Test 2 of 7: CPU frequency table duplicates
PASSED: Test 2, No duplicates in CPU frequency table

Test 3 of 7: CPU frequency firmware limits
PASSED: Test 3, No BIOS limits imposed

Test 4 of 7: CPU frequency claimed maximum
WARNING: Test 4, cpu 0 has claimed frequency of 3000000, higher than max freq of
0
WARNING: Test 4, cpu 1 has claimed frequency of 3000000, higher than max freq of
0
WARNING: Test 4, cpu 2 has claimed frequency of 3000000, higher than max freq of
0
WARNING: Test 4, cpu 3 has claimed frequency of 3000000, higher than max freq of
0
FAILED [MEDIUM] CPUFreqClaimedMax: Test 4, CPU max frequency is unreachable

Test 5 of 7: CPU frequency SW_ANY control
SKIPPED: Test 5, Can't set CPU frequencies

Test 6 of 7: CPU frequency SW_ALL control
SKIPPED: Test 6, Can't set CPU frequencies

Test 7 of 7: CPU frequency performance tests.
FAILED [MEDIUM] CPUFreqSetFailed: Test 7, Can't set CPU frequencies

================================================================================
3 passed, 2 failed, 4 warnings, 0 aborted, 2 skipped, 0 info only.
================================================================================

maxfreq: Test max CPU frequencies against max scaling frequency.
--------------------------------------------------------------------------------
Test 1 of 1: Maximum CPU frequency test.
This test checks the maximum CPU frequency as detected by the kernel for each
CPU against maxiumum frequency as specified by the BIOS frequency scaling
settings.
PASSED: Test 1, 4 CPUs passed the maximum frequency check.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

virt: CPU Virtualisation Configuration test.
--------------------------------------------------------------------------------
Test 1 of 1: CPU Virtualisation Configuration test.
Check VT/VMX Virtualization extensions are set up correctly.
PASSED: Test 1, Virtualization extensions supported and enabled by BIOS.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

pnp: BIOS Support Installation structure test.
--------------------------------------------------------------------------------
Test 1 of 1: PnP BIOS Support Installation structure test.
This test tries to find and sanity check the Plug and Play BIOS Support
Installation Check structure. 

Found PnP Installation Check structure at 0x000f0ad0
  Signature                          : $PnP
  Version                            : 0x10 (1.0)
  Length                             : 0x0021 bytes
  Control Field                      : 0x0000 (Not supported)
  Event Notification Flag Address    : 0x00000000 (undefined)
  Real Mode 16 bit Code Address      : 0xf000:c9d6
  Real Mode 16 bit Data Address      : 0xf000:0000
  16 bit Protected Mode Code Address : 0x000fc9fe
  16 bit Protected Mode Data Address : 0x000f0000
  OEM Device Identifier              : 0x00000000 (undefined)

PASSED: Test 1, Version 1.0 detected.
PASSED: Test 1, PnP Installation Check structure is the correct length of 33
bytes.

================================================================================
2 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

pciirq: PCI IRQ Routing Table test.
--------------------------------------------------------------------------------
Test 1 of 1: PCI IRQ Routing Table test.
This test tries to find and sanity check the PCI IRQ Routing Table, as defined
by http://www.microsoft.com/taiwan/whdc/archive/pciirq.mspx and described in
pages 233-238 of PCI System Architecture, Fourth Edition, Mindshare, Inc.
(1999). NOTE: The PCI IRQ Routing Table only really knows about ISA IRQs and is
generally not used with APIC. 

Found PCI IRQ Routing Table at 0x000fd310
  Signature             : $PIR
  Version               : 0x0100 (1.0)
  Table Size            : 0x0140 bytes (18 slot entries)
  PCI Router ID         : 00:1f.0
  PCI Exclusive IRQs    : 0x0000 (none)
  Compatible PCI Router : 8086:27b8
  Miniport Data         : 0x00000000 (none)
  Reserved              : 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  Checksum              : 0x60

Bus:Dev Slot  INTA#   INTB#   INTC#   INTD#
 00:1f   00  69/dc78 63/dc78 61/dc78 60/dc78 
 00:14   00  60/dc78                         
 00:1a   00  60/dc78                         
 00:1b   00  6a/dc78                         
 00:1c   00  60/dc78 61/dc78 62/dc78 63/dc78 
 01:00   21  60/dc78 61/dc78 62/dc78 63/dc78 
 03:00   0a  60/dc78 61/dc78 62/dc78 63/dc78 
 00:15   00          68/dc78 69/dc78 69/dc78 
 00:17   00  6a/dc78                         
 00:13   00  6b/dc78                         
 00:01   00  60/dc78 61/dc78 62/dc78 63/dc78 
 00:02   00  60/dc78                         
 00:03   00  60/dc78                         
 00:04   00  60/dc78 61/dc78 62/dc78 63/dc78 
 02:00   09  63/dc78 60/dc78 61/dc78 60/dc78 
 00:1d   00  69/dc78                         
 00:16   00  60/dc78 63/dc78 63/dc78 61/dc78 
 00:19   00  68/dc78                         

PASSED: Test 1, The Compatible PCI Interrupt Router is defined.
PASSED: Test 1, Table size was correct for 18 slot entries.
PASSED: Test 1, Reserved region is set to zero.
PASSED: Test 1, All 18 slots have sane looking link and IRQ bitmaps.

================================================================================
4 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

mpcheck: MultiProcessor Tables tests.
--------------------------------------------------------------------------------
The kernel is using the ACPI MADT for SMP configuration information, so the
Multiprocessor Tables are not used by the kernel. Any errors in the tables will
not affect the operation of Linux unless it is booted with ACPI disabled.

NOTE: Since ACPI is being used in preference to the Multiprocessor Tables, any
errors found in the mpcheck tests will be tagged as LOW errors.

Test 1 of 9: Test MP header.
PASSED: Test 1, MP header looks sane.

Test 2 of 9: Test MP CPU entries.
PASSED: Test 2, All 2 CPU entries look sane.

Test 3 of 9: Test MP Bus entries.
PASSED: Test 3, All 5 Bus Entries looked sane.

Test 4 of 9: Test MP IO APIC entries.
PASSED: Test 4, All 1 IO APIC Entries look sane.

Test 5 of 9: Test MP IO Interrupt entries.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 8 (@0x000fd794) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 9 (@0x000fd79c) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 10 (@0x000fd7a4) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 11 (@0x000fd7ac) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 12 (@0x000fd7b4) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 13 (@0x000fd7bc) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 14 (@0x000fd7c4) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 15 (@0x000fd7cc) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 16 (@0x000fd7d4) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 17 (@0x000fd7dc) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 18 (@0x000fd7e4) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 19 (@0x000fd7ec) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 20 (@0x000fd7f4) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 21 (@0x000fd7fc) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 22 (@0x000fd804) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 23 (@0x000fd80c) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 24 (@0x000fd814) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 25 (@0x000fd81c) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 26 (@0x000fd824) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 27 (@0x000fd82c) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 28 (@0x000fd834) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 29 (@0x000fd83c) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 30 (@0x000fd844) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 31 (@0x000fd84c) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 32 (@0x000fd854) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 33 (@0x000fd85c) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 34 (@0x000fd864) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 35 (@0x000fd86c) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 36 (@0x000fd874) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 37 (@0x000fd87c) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 38 (@0x000fd884) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 39 (@0x000fd88c) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 40 (@0x000fd894) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 41 (@0x000fd89c) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 42 (@0x000fd8a4) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 43 (@0x000fd8ac) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 44 (@0x000fd8b4) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 45 (@0x000fd8bc) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 46 (@0x000fd8c4) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 47 (@0x000fd8cc) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 48 (@0x000fd8d4) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 49 (@0x000fd8dc) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 50 (@0x000fd8e4) has a
Destination IO APIC ID 0x02 which has not been defined.
FAILED [LOW] MPIOAPICId: Test 5, IO Interrupt Entry 51 (@0x000fd8ec) has a
Destination IO APIC ID 0x02 which has not been defined.

Test 6 of 9: Test MP Local Interrupt entries.
PASSED: Test 6, All 2 Local Interrupt Entries look sane.

Test 7 of 9: Test MP System Address entries.
PASSED: Test 7, All 5 System Address Space Mapping Entries looks sane.

Test 8 of 9: Test MP Bus Hierarchy entries.
PASSED: Test 8, All 1 Bus Hierarchy Entries look sane.

Test 9 of 9: Test MP Compatible Bus Address Space entries.
PASSED: Test 9, All 2 Compatible Bus Address Space Entries look sane.

================================================================================
8 passed, 44 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

hda_audio: HDA Audio Pin Configuration test.
--------------------------------------------------------------------------------
Test 1 of 1: HDA Audio Pin Configuration test.
Checking 'hwC0D0':
Vendor Name    : Intel
Vendor ID      : 0x80862807
Subsystem ID   : 0x80860101
Revision ID    : 0x100000
BIOS pin configurations:
  Pin  Setting
  0x0005 0x18560010
  0x0006 0x18560010
  0x0007 0x18560010
PASSED: Test 1, Default BIOS pin configurations did not have software override.

Checking 'hwC1D0':
Vendor Name    : Realtek
Vendor ID      : 0x10ec0292
Subsystem ID   : 0x102805e0
Revision ID    : 0x100001
BIOS pin configurations:
  Pin  Setting
  0x0012 0x90a60140
  0x0013 0x411111f0
  0x0014 0x90170110
  0x0015 0x0221401f
  0x0016 0x01014020
  0x0018 0x411111f0
  0x0019 0x01a19030
  0x001a 0x411111f0
  0x001b 0x411111f0
  0x001d 0x40700001
  0x001e 0x411111f0
Driver defined pin configurations:
  Pin  Setting
  0x0016 0x21014020
  0x0019 0x21a19030
  0x001a 0x01a1913c
BIOS pin configurations required software override to make HDA audio work
correctly.
The driver or user provided overrides should be corrected in BIOS firmware.


================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

ebda: Test EBDA region is mapped and reserved in memory map table.
--------------------------------------------------------------------------------
Test 1 of 1: Test EBDA is reserved in E820 table.
The Extended BIOS Data Area (EBDA) is normally located at the end of the low
640K region and is typically 2-4K in size. It should be reserved in the Int 15
AX=E820 BIOS memory map table.
PASSED: Test 1, EBDA region mapped at 0x91400 and reserved as a 58K region in
the Int 15 AX=E820 BIOS memory map table at 0x91400..0x9ffff.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

bios32: BIOS32 Service Directory test.
--------------------------------------------------------------------------------
Test 1 of 1: BIOS32 Service Directory test.
This test tries to find and sanity check the BIOS32 Service Directory as defined
in the Standard BIOS 32-bit Service Directory Proposal, Revision 0.4 May 24,
1993, Phoenix Technologies Ltd and also the PCI BIOS specification.
Could not find BIOS32 Service Directory.

================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

apicedge: APIC edge/level test.
--------------------------------------------------------------------------------
Test 1 of 1: Legacy and PCI Interrupt Edge/Level trigger tests.
FAILED [MEDIUM] NonLegacyIRQLevelTrig: Test 1, Non-Legacy interrupt 0 is
incorrectly level triggered.
FAILED [MEDIUM] NonLegacyIRQLevelTrig: Test 1, Non-Legacy interrupt 1 is
incorrectly level triggered.
FAILED [MEDIUM] NonLegacyIRQLevelTrig: Test 1, Non-Legacy interrupt 8 is
incorrectly level triggered.
FAILED [MEDIUM] NonLegacyIRQLevelTrig: Test 1, Non-Legacy interrupt 12 is
incorrectly level triggered.

================================================================================
0 passed, 4 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

xenv: XENV Xen Environment Table tests.
--------------------------------------------------------------------------------
ACPI XENV table does not exist, skipping test
Aborted test, initialisation failed.
================================================================================
0 passed, 0 failed, 0 warning, 1 aborted, 0 skipped, 0 info only.
================================================================================

xsdt: XSDT Extended System Description Table test.
--------------------------------------------------------------------------------
Test 1 of 1: XSDT Extended System Description Table test.
PASSED: Test 1, No issues found in XSDT table.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

wmi: Extract and analyse Windows Management Instrumentation (WMI).
--------------------------------------------------------------------------------
Test 1 of 1: Windows Management Instrumentation test.

\_SB_.AMW0._WDG (1 of 5)
  GUID: 8D9DDCBC-A997-11DA-B012-B622A1EF5492
  WMI Object:
    Flags          : 0x00 (None)
    Object ID      : AA
    Instance       : 0x01

\_SB_.AMW0._WDG (2 of 5)
  GUID: A80593CE-A997-11DA-B012-B622A1EF5492
  WMI Method:
    Flags          : 0x02 (Method)
    Object ID      : BA
    Instance       : 0x01
    Driver         : alienware-wmi (Alienware)
PASSED: Test 1, A80593CE-A997-11DA-B012-B622A1EF5492 has associated method
\_SB_.AMW0.WMBA

\_SB_.AMW0._WDG (3 of 5)
  GUID: 9DBB5994-A997-11DA-B012-B622A1EF5492
  WMI Event:
    Flags          : 0x08 (Event)
    Notification ID: 0xd0
    Reserved       : 0x00
    Instance       : 0x01
    Driver         : dell-wmi (Dell)

\_SB_.AMW0._WDG (4 of 5)
  GUID: A3776CE0-1E88-11DB-A98B-0800200C9A66
  WMI Object:
    Flags          : 0x00 (None)
    Object ID      : BC
    Instance       : 0x01

\_SB_.AMW0._WDG (5 of 5)
  GUID: 05901221-D566-11D1-B2F0-00A0C9062910
  WMI Object:
    Flags          : 0x00 (None)
    Object ID      : MO
    Instance       : 0x01
PASSED: Test 1, All events associated with \_SB_.AMW0._WDG are handled by a
kernel driver.

================================================================================
2 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

wdat: WDAT Microsoft Hardware Watchdog Action Table test.
--------------------------------------------------------------------------------
ACPI WDAT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

wakealarm: ACPI Wakealarm tests.
--------------------------------------------------------------------------------
Test 1 of 4: Test existence of RTC with alarm interface.
PASSED: Test 1, RTC with a RTC alarm ioctl() interface found.

Test 2 of 4: Trigger wakealarm for 1 seconds in the future.
Trigger wakealarm for 1 seconds in the future.
PASSED: Test 2, RTC wakealarm was triggered successfully.

Test 3 of 4: Test if wakealarm is fired.
PASSED: Test 3, RTC wakealarm triggered and fired successfully.

Test 4 of 4: Multiple wakealarm firing tests.
Trigger wakealarm for 1 seconds in the future.
Trigger wakealarm for 2 seconds in the future.
Trigger wakealarm for 3 seconds in the future.
Trigger wakealarm for 4 seconds in the future.
PASSED: Test 4, RTC wakealarm triggered and fired successfully.

================================================================================
4 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

waet: WAET Windows ACPI Emulated Devices Table test.
--------------------------------------------------------------------------------
ACPI WAET table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

uefi: UEFI Data Table test.
--------------------------------------------------------------------------------
ACPI UEFI table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

tpm2: TPM2 Trusted Platform Module 2 test.
--------------------------------------------------------------------------------
ACPI TPM2 table does not exist, skipping test
Aborted test, initialisation failed.
================================================================================
0 passed, 0 failed, 0 warning, 1 aborted, 0 skipped, 0 info only.
================================================================================

tcpa: TCPA Trusted Computing Platform Alliance Capabilities Table test.
--------------------------------------------------------------------------------
ACPI TCPA table does not exist, skipping test
Aborted test, initialisation failed.
================================================================================
0 passed, 0 failed, 0 warning, 1 aborted, 0 skipped, 0 info only.
================================================================================

syntaxcheck: Re-assemble DSDT and SSDTs to find syntax errors and warnings.
--------------------------------------------------------------------------------
Test 1 of 1: Disassemble and reassemble DSDT and SSDTs.

Checking ACPI table DSDT (#0)

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 2280
Line | AML source
--------------------------------------------------------------------------------
02277|                 If (LEqual (PM6H, One))
02278|                 {
02279|                     CreateBitField (BUF0, \_SB.PCI0._Y0C._RW, ECRW)  // _RW_: Read-Write Status
02280|                     Store (Zero, ECRW (If (PM0H)
     |                                        ^
     | Error 6126: syntax error, unexpected PARSEOP_IF, expecting ',' or ')'  
02281|                             {
02282|                                 CreateDWordField (BUF0, \_SB.PCI0._Y0D._LEN, F0LN)  // _LEN: Length
02283|                                 Store (Zero, F0LN) /* \_SB_.PCI0._CRS.F0LN */
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 2284
Line | AML source
--------------------------------------------------------------------------------
02281|                             {
02282|                                 CreateDWordField (BUF0, \_SB.PCI0._Y0D._LEN, F0LN)  // _LEN: Length
02283|                                 Store (Zero, F0LN) /* \_SB_.PCI0._CRS.F0LN */
02284|                             }))
     |                             ^
     | Error 6126: syntax error, unexpected ')'  
02285|                 }
02286| 
02287|                 If (LEqual (PM0H, One))
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 2290
Line | AML source
--------------------------------------------------------------------------------
02287|                 If (LEqual (PM0H, One))
02288|                 {
02289|                     CreateBitField (BUF0, \_SB.PCI0._Y0D._RW, F0RW)  // _RW_: Read-Write Status
02290|                     Store (Zero, F0RW) /* \_SB_.PCI0._CRS.F0RW */
     |                        ^
     | Error 6126: syntax error, unexpected PARSEOP_STORE  
02291|                 }
02292| 
02293|                 CreateDWordField (BUF0, \_SB.PCI0._Y0E._MIN, M1MN)  // _MIN: Minimum Base Address
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 2296
Line | AML source
--------------------------------------------------------------------------------
02293|                 CreateDWordField (BUF0, \_SB.PCI0._Y0E._MIN, M1MN)  // _MIN: Minimum Base Address
02294|                 CreateDWordField (BUF0, \_SB.PCI0._Y0E._MAX, M1MX)  // _MAX: Maximum Base Address
02295|                 CreateDWordField (BUF0, \_SB.PCI0._Y0E._LEN, M1LN)  // _LEN: Length
02296|                 ShiftLeft (TLUD, 0x14, M1MN) /* \_SB_.PCI0._CRS.M1MN */
     |                        ^
     | Error 6126: syntax error, unexpected PARSEOP_SHIFTLEFT  
02297|                 Add (Subtract (M1MX, M1MN), One, M1LN) /* \_SB_.PCI0._CRS.M1LN */
02298|                 Return (BUF0) /* \_SB_.PCI0.BUF0 */
02299|             }
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 4449
Line | AML source
--------------------------------------------------------------------------------
04446|             }
04447| 
04448|             Zero
04449|             Zero
     |               ^
     | Error 6126: syntax error, unexpected PARSEOP_ZERO  
04450|             Zero
04451|             Zero
04452|             Zero
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 4582
Line | AML source
--------------------------------------------------------------------------------
04579|             Zero
04580|             Zero
04581|             Device (B0D4)
04582|             {
     |            ^
     | Error 6126: syntax error, unexpected '{'  
04583|                 Name (_ADR, 0x00040000)  // _ADR: Address
04584|             }
04585| 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 4586
Line | AML source
--------------------------------------------------------------------------------
04583|                 Name (_ADR, 0x00040000)  // _ADR: Address
04584|             }
04585| 
04586|             Device (LPCB)
     | ^                                         
     | Error 6126: syntax error, unexpected PARSEOP_DEVICE, expecting $end and premature End-Of-File
04587|             {
04588|                 Name (_ADR, 0x001F0000)  // _ADR: Address
04589|                 Scope (\_SB)
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] SyntaxCheckIASLCompilerAborted: Test 1, Compilation aborted early
due to a parser detected syntax error.

ADVICE: Some subsequent errors may not be detected because the compiler had to
terminate prematurely. If the compiler did not abort early then potentially
correct code may parse incorrectly producing some or many false positive errors.

Table DSDT (0) reassembly: Found 7 errors, 0 warnings, 0 remarks.


Checking ACPI table SSDT (#1)

Assembler remark in line 49
Line | AML source
--------------------------------------------------------------------------------
00046| 
00047|             Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
00048|             {
00049|                 Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
     |                         ^
     | Remark 2011: Use of compiler reserved name    (_T_0)
00050|                 Name (PGCE, Zero)
00051|                 Name (PGCD, Zero)
00052|                 Name (DFUE, Zero)
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

Table SSDT (1) reassembly: Found 0 errors, 0 warnings, 1 remarks.


Checking ACPI table SSDT (#2)

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
36
Line | AML source
--------------------------------------------------------------------------------
00033| 
00034|     Scope (\_SB.PCI0.SAT0.PRT2)
00035|     {
00036|         Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
00037|         {
00038|             If (LEqual (Arg0, ToUUID ("bdfaef30-aebb-11de-8a39-0800200c9a66")))
00039|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

Assembler remark in line 40
Line | AML source
--------------------------------------------------------------------------------
00037|         {
00038|             If (LEqual (Arg0, ToUUID ("bdfaef30-aebb-11de-8a39-0800200c9a66")))
00039|             {
00040|                 Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
     |                         ^
     | Remark 2011: Use of compiler reserved name    (_T_0)
00041|                 Store (ToInteger (Arg2), _T_0) /* \_SB_.PCI0.SAT0.PRT2._DSM._T_0 */
00042|                 If (LEqual (_T_0, Zero))
00043|                 {
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

Assembler remark in line 44
Line | AML source
--------------------------------------------------------------------------------
00041|                 Store (ToInteger (Arg2), _T_0) /* \_SB_.PCI0.SAT0.PRT2._DSM._T_0 */
00042|                 If (LEqual (_T_0, Zero))
00043|                 {
00044|                     Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
     |                             ^
     | Remark 2011: Use of compiler reserved name    (_T_1)
00045|                     Store (ToInteger (Arg1), _T_1) /* \_SB_.PCI0.SAT0.PRT2._DSM._T_1 */
00046|                     If (LEqual (_T_1, One))
00047|                     {
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

Table SSDT (2) reassembly: Found 0 errors, 0 warnings, 3 remarks.


Checking ACPI table SSDT (#3)

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 221
Line | AML source
--------------------------------------------------------------------------------
00218|                 0x00000800
00219|             }
00220|         })
00221|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00222|         {
00223|             0x80000000, 
00224|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 241
Line | AML source
--------------------------------------------------------------------------------
00238|             0x80000000
00239|         }
00240| 
00241|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00242|         {
00243|             0x80000000, 
00244|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 242
Line | AML source
--------------------------------------------------------------------------------
00239|         }
00240| 
00241|         Package (0x06)
00242|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00243|             0x80000000, 
00244|             0x80000000, 
00245|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 261
Line | AML source
--------------------------------------------------------------------------------
00258|             0x80000000
00259|         }
00260| 
00261|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00262|         {
00263|             0x80000000, 
00264|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 262
Line | AML source
--------------------------------------------------------------------------------
00259|         }
00260| 
00261|         Package (0x06)
00262|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00263|             0x80000000, 
00264|             0x80000000, 
00265|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 281
Line | AML source
--------------------------------------------------------------------------------
00278|             0x80000000
00279|         }
00280| 
00281|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00282|         {
00283|             0x80000000, 
00284|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 282
Line | AML source
--------------------------------------------------------------------------------
00279|         }
00280| 
00281|         Package (0x06)
00282|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00283|             0x80000000, 
00284|             0x80000000, 
00285|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 301
Line | AML source
--------------------------------------------------------------------------------
00298|             0x80000000
00299|         }
00300| 
00301|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00302|         {
00303|             0x80000000, 
00304|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 302
Line | AML source
--------------------------------------------------------------------------------
00299|         }
00300| 
00301|         Package (0x06)
00302|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00303|             0x80000000, 
00304|             0x80000000, 
00305|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 321
Line | AML source
--------------------------------------------------------------------------------
00318|             0x80000000
00319|         }
00320| 
00321|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00322|         {
00323|             0x80000000, 
00324|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 322
Line | AML source
--------------------------------------------------------------------------------
00319|         }
00320| 
00321|         Package (0x06)
00322|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00323|             0x80000000, 
00324|             0x80000000, 
00325|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 341
Line | AML source
--------------------------------------------------------------------------------
00338|             0x80000000
00339|         }
00340| 
00341|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00342|         {
00343|             0x80000000, 
00344|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 342
Line | AML source
--------------------------------------------------------------------------------
00339|         }
00340| 
00341|         Package (0x06)
00342|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00343|             0x80000000, 
00344|             0x80000000, 
00345|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 361
Line | AML source
--------------------------------------------------------------------------------
00358|             0x80000000
00359|         }
00360| 
00361|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00362|         {
00363|             0x80000000, 
00364|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 362
Line | AML source
--------------------------------------------------------------------------------
00359|         }
00360| 
00361|         Package (0x06)
00362|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00363|             0x80000000, 
00364|             0x80000000, 
00365|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 381
Line | AML source
--------------------------------------------------------------------------------
00378|             0x80000000
00379|         }
00380| 
00381|         Name (PSDF, Zero)
     |           ^
     | Error 6126: syntax error, unexpected PARSEOP_NAME
00382|         Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
00383|         {
00384|             If (LNot (PSDF))
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 422
Line | AML source
--------------------------------------------------------------------------------
00419|             }
00420|         })
00421|     }
00422| }
     | ^                                         
     | Error 6126: syntax error, unexpected '}', expecting $end and premature End-Of-File
00423| 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] SyntaxCheckIASLCompilerAborted: Test 1, Compilation aborted early
due to a parser detected syntax error.

ADVICE: Some subsequent errors may not be detected because the compiler had to
terminate prematurely. If the compiler did not abort early then potentially
correct code may parse incorrectly producing some or many false positive errors.

Table SSDT (3) reassembly: Found 17 errors, 0 warnings, 0 remarks.


Checking ACPI table SSDT (#4)

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 123
Line | AML source
--------------------------------------------------------------------------------
00120| 
00121|             Store (CPDC (Arg0), Local0)
00122|             GCAP (Local0)
00123|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00124|         }
00125| 
00126|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
133
Line | AML source
--------------------------------------------------------------------------------
00130|             Return (Local0)
00131|         }
00132| 
00133|         Method (CPDC, 1, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
00134|         {
00135|             CreateDWordField (Arg0, Zero, REVS)
00136|             CreateDWordField (Arg0, 0x04, SIZE)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 148
Line | AML source
--------------------------------------------------------------------------------
00145|             Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2))
00146|         }
00147| 
00148|         Method (COSC, 4, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg2)
00149|         {
00150|             CreateDWordField (Arg3, Zero, STS0)
00151|             CreateDWordField (Arg3, 0x04, CAP0)
================================================================================
FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
148
Line | AML source
--------------------------------------------------------------------------------
00145|             Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2))
00146|         }
00147| 
00148|         Method (COSC, 4, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
00149|         {
00150|             CreateDWordField (Arg3, Zero, STS0)
00151|             CreateDWordField (Arg3, 0x04, CAP0)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 151
Line | AML source
--------------------------------------------------------------------------------
00148|         Method (COSC, 4, NotSerialized)
00149|         {
00150|             CreateDWordField (Arg3, Zero, STS0)
00151|             CreateDWordField (Arg3, 0x04, CAP0)
     |                                             ^
     | Remark 2089: Object is not referenced    (Name is within method [COSC])
00152|             CreateDWordField (Arg0, Zero, IID0)
00153|             CreateDWordField (Arg0, 0x04, IID1)
00154|             CreateDWordField (Arg0, 0x08, IID2)
================================================================================
FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
177
Line | AML source
--------------------------------------------------------------------------------
00174|             Return (Arg3)
00175|         }
00176| 
00177|         Method (GCAP, 1, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
00178|         {
00179|             CreateDWordField (Arg0, Zero, STS0)
00180|             CreateDWordField (Arg0, 0x04, CAP0)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 216
Line | AML source
--------------------------------------------------------------------------------
00213|         {
00214|             Store (\_PR.CPU0.CPDC (Arg0), Local0)
00215|             GCAP (Local0)
00216|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00217|         }
00218| 
00219|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
256
Line | AML source
--------------------------------------------------------------------------------
00253|             Return (Zero)
00254|         }
00255| 
00256|         Method (APCT, 0, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
00257|         {
00258|             If (LAnd (And (CFGD, 0x7A), LNot (And (SDTL, 0x20))))
00259|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
266
Line | AML source
--------------------------------------------------------------------------------
00263|             }
00264|         }
00265| 
00266|         Method (APPT, 0, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
00267|         {
00268|             If (LAnd (And (CFGD, One), LNot (And (SDTL, 0x10))))
00269|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 283
Line | AML source
--------------------------------------------------------------------------------
00280|         {
00281|             Store (\_PR.CPU0.CPDC (Arg0), Local0)
00282|             GCAP (Local0)
00283|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00284|         }
00285| 
00286|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 330
Line | AML source
--------------------------------------------------------------------------------
00327|         {
00328|             Store (\_PR.CPU0.CPDC (Arg0), Local0)
00329|             GCAP (Local0)
00330|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00331|         }
00332| 
00333|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 377
Line | AML source
--------------------------------------------------------------------------------
00374|         {
00375|             Store (\_PR.CPU0.CPDC (Arg0), Local0)
00376|             GCAP (Local0)
00377|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00378|         }
00379| 
00380|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 424
Line | AML source
--------------------------------------------------------------------------------
00421|         {
00422|             Store (\_PR.CPU0.CPDC (Arg0), Local0)
00423|             GCAP (Local0)
00424|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00425|         }
00426| 
00427|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 471
Line | AML source
--------------------------------------------------------------------------------
00468|         {
00469|             Store (\_PR.CPU0.CPDC (Arg0), Local0)
00470|             GCAP (Local0)
00471|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00472|         }
00473| 
00474|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 518
Line | AML source
--------------------------------------------------------------------------------
00515|         {
00516|             Store (\_PR.CPU0.CPDC (Arg0), Local0)
00517|             GCAP (Local0)
00518|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00519|         }
00520| 
00521|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

Table SSDT (4) reassembly: Found 0 errors, 8 warnings, 7 remarks.


Checking ACPI table SSDT (#5)

FAILED [MEDIUM] AMLAsmASL_MSG_NO_REGION: Test 1, Assembler warning in line 68
Line | AML source
--------------------------------------------------------------------------------
00065|     Scope (\_SB.PCI0.SAT0)
00066|     {
00067|         Name (REGF, One)
00068|         Method (_REG, 2, NotSerialized)  // _REG: Region Availability
     |                   ^
     | Warning 3079: _REG has no corresponding Operation Region  
00069|         {
00070|             If (LEqual (Arg0, 0x02))
00071|             {
================================================================================

ADVICE: (for Warning #3079, ASL_MSG_NO_REGION): _REG requires a corresponding
Operation Region, however one was not found.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
99
Line | AML source
--------------------------------------------------------------------------------
00096|         Device (SPT0)
00097|         {
00098|             Name (_ADR, 0xFFFF)  // _ADR: Address
00099|             Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
     |                       ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
00100|             {
00101|                 Name (FFS0, Buffer (0x07)
00102|                 {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
149
Line | AML source
--------------------------------------------------------------------------------
00146|         Device (SPT1)
00147|         {
00148|             Name (_ADR, 0x0001FFFF)  // _ADR: Address
00149|             Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
     |                       ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
00150|             {
00151|                 Name (FFS0, Buffer (0x07)
00152|                 {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

Table SSDT (5) reassembly: Found 0 errors, 1 warnings, 2 remarks.


================================================================================
0 passed, 45 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

stao: STAO Status Override Table test.
--------------------------------------------------------------------------------
ACPI STAO table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

srat: SRAT System Resource Affinity Table test.
--------------------------------------------------------------------------------
ACPI SRAT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

spmi: SPMI Service Processor Management Interface Description Table test.
--------------------------------------------------------------------------------
ACPI SPMI table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

spcr: SPCR Serial Port Console Redirection Table test.
--------------------------------------------------------------------------------
ACPI SPCR table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

slit: SLIT System Locality Distance Information test.
--------------------------------------------------------------------------------
ACPI SLIT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

slic: SLIC Software Licensing Description Table test.
--------------------------------------------------------------------------------
Test 1 of 1: SLIC Software Licensing Description Table test.
Software Licensing Description Table
SLIC Public Key Structure has had minimal check due to proprietary nature of the
table
SLIC Windows Marker Structure has had minimal check due to proprietary nature of
the table
PASSED: Test 1, No issues found in SLIC table.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

sbst: SBST Smart Battery Specification Table test.
--------------------------------------------------------------------------------
ACPI SBST table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

rsdt: RSDT Root System Description Table test.
--------------------------------------------------------------------------------
Test 1 of 1: RSDT Root System Description Table test.
PASSED: Test 1, No issues found in RSDT table.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

rsdp: RSDP Root System Description Pointer test.
--------------------------------------------------------------------------------
Test 1 of 1: RSDP Root System Description Pointer test.
PASSED: Test 1, No issues found in RSDP table.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

pcc: Processor Clocking Control (PCC) test.
--------------------------------------------------------------------------------
Test 1 of 1: Processor Clocking Control (PCC) test.
This test checks the sanity of the Processor Clocking Control as found on some
HP ProLiant machines. Most computers do not use this interface to control the
CPU clock frequency, so this test will be skipped.

This machine does not use Processor Clocking Control (PCC).

================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 1 info only.
================================================================================

osilinux: Disassemble DSDT to check for _OSI("Linux").
--------------------------------------------------------------------------------
Test 1 of 1: Disassemble DSDT to check for _OSI("Linux").
This is not strictly a failure mode, it just alerts one that this has been
defined in the DSDT and probably should be avoided since the Linux ACPI driver
matches onto the Windows _OSI strings
            {
                If (_OSI ("Linux"))
                {
                    Store (0x03E8, OSYS) /* \OSYS */
                }
                If (_OSI ("Windows 2001"))
                {
                    Store (0x07D1, OSYS) /* \OSYS */
                }
                If (_OSI ("Windows 2001 SP1"))
                {
                    Store (0x07D1, OSYS) /* \OSYS */
                }
                If (_OSI ("Windows 2001 SP2"))
                {
                    Store (0x07D2, OSYS) /* \OSYS */
                }
                If (_OSI ("Windows 2001.1"))
                {
                    Store (0x07D3, OSYS) /* \OSYS */
                }
                If (_OSI ("Windows 2006"))
                {
                    Store (0x07D6, OSYS) /* \OSYS */
                }
                If (_OSI ("Windows 2009"))
                {
                    Store (0x07D9, OSYS) /* \OSYS */
                }
                If (_OSI ("Windows 2012"))
                {
                    Store (0x07DC, OSYS) /* \OSYS */
                }
                If (_OSI ("Windows 2013"))
                {
                    Store (0x07DD, OSYS) /* \OSYS */
                }
            }
WARNING: Test 1, DSDT implements a deprecated _OSI("Linux") test.

================================================================================
0 passed, 0 failed, 1 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

method: ACPI DSDT Method Semantic tests.
--------------------------------------------------------------------------------
Test 1 of 191: Test Method Names.
Found 2448 Objects 
PASSED: Test 1, Method names contain legal characters.

Test 2 of 191: Test _AEI.
SKIPPED: Test 2, Skipping test for non-existant object _AEI.

Test 3 of 191: Test _EVT (Event Method).
SKIPPED: Test 3, Skipping test for non-existant object _EVT.

Test 4 of 191: Test _DLM (Device Lock Mutex).
SKIPPED: Test 4, Skipping test for non-existant object _DLM.

Test 5 of 191: Test _PIC (Inform AML of Interrupt Model).
PASSED: Test 5, \_PIC returned no values as expected.
PASSED: Test 5, \_PIC returned no values as expected.
PASSED: Test 5, \_PIC returned no values as expected.

Test 6 of 191: Test _CID (Compatible ID).
PASSED: Test 6, \_SB_.PCI0._CID returned an integer 0x030ad041 (EISA ID
PNP0A03).
PASSED: Test 6, \_SB_.PCI0.LPCB.CWDT._CID returned an integer 0x020cd041 (EISA
ID PNP0C02).
PASSED: Test 6, \_SB_.PCI0.LPCB.PS2K._CID returned an integer 0x0303d041 (EISA
ID PNP0303).
PASSED: Test 6, \_SB_.PCI0.LPCB.PS2M._CID returned an integer 0x130fd041 (EISA
ID PNP0F13).
PASSED: Test 6, \_SB_.PEPD._CID returned an integer 0x800dd041 (EISA ID
PNP0D80).
PASSED: Test 6, \SHAD._CID returned an integer 0x020cd041 (EISA ID PNP0C02).

Test 7 of 191: Test _DDN (DOS Device Name).
SKIPPED: Test 7, Skipping test for non-existant object _DDN.

Test 8 of 191: Test _HID (Hardware ID).
PASSED: Test 8, \_SB_.PCI0._HID returned an integer 0x080ad041 (EISA ID
PNP0A08).
PASSED: Test 8, \_SB_.PCI0.TPMX._HID returned an integer 0x010cd041 (EISA ID
PNP0C01).
PASSED: Test 8, \_SB_.PCI0.LPCB.DMAC._HID returned an integer 0x0002d041 (EISA
ID PNP0200).
PASSED: Test 8, \_SB_.PCI0.LPCB.FWHD._HID returned an integer 0x0008d425 (EISA
ID INT0800).
PASSED: Test 8, \_SB_.PCI0.LPCB.HPET._HID returned an integer 0x0301d041 (EISA
ID PNP0103).
PASSED: Test 8, \_SB_.PCI0.LPCB.IPIC._HID returned an integer 0x0000d041 (EISA
ID PNP0000).
PASSED: Test 8, \_SB_.PCI0.LPCB.MATH._HID returned an integer 0x040cd041 (EISA
ID PNP0C04).
PASSED: Test 8, \_SB_.PCI0.LPCB.LDRC._HID returned an integer 0x020cd041 (EISA
ID PNP0C02).
PASSED: Test 8, \_SB_.PCI0.LPCB.RTC_._HID returned an integer 0x000bd041 (EISA
ID PNP0B00).
PASSED: Test 8, \_SB_.PCI0.LPCB.TIMR._HID returned an integer 0x0001d041 (EISA
ID PNP0100).
PASSED: Test 8, \_SB_.PCI0.LPCB.CWDT._HID returned an integer 0x0d3fd425 (EISA
ID INT3F0D).
PASSED: Test 8, \_SB_.PCI0.LPCB.RMSC._HID returned an integer 0x020cd041 (EISA
ID PNP0C02).
PASSED: Test 8, \_SB_.PCI0.LPCB.ECDV._HID returned an integer 0x090cd041 (EISA
ID PNP0C09).
PASSED: Test 8, \_SB_.PCI0.LPCB.PS2K._HID returned a string 'DLLK05E0' as
expected.
PASSED: Test 8, \_SB_.PCI0.LPCB.PS2M._HID returned an integer 0xe0058c11 (EISA
ID DLL05E0).
PASSED: Test 8, \_SB_.PCI0.LPCB.UAR1._HID returned an integer 0x0105d041 (EISA
ID PNP0501).
PASSED: Test 8, \_SB_.PCI0.LPCB.LPTE._HID returned an integer 0x0104d041 (EISA
ID PNP0401).
PASSED: Test 8, \_SB_.PCI0.PDRC._HID returned an integer 0x020cd041 (EISA ID
PNP0C02).
PASSED: Test 8, \_SB_.PCI0.A_CC._HID returned a string 'SMO8810' as expected.
PASSED: Test 8, \_SB_.LNKA._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.LNKB._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.LNKC._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.LNKD._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.LNKE._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.LNKF._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.LNKG._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.LNKH._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.MEM2._HID returned an integer 0x010cd041 (EISA ID
PNP0C01).
PASSED: Test 8, \_SB_.PEPD._HID returned a string 'INT33A1' as expected.
PASSED: Test 8, \_SB_.BTKL._HID returned a string 'INT3420' as expected.
PASSED: Test 8, \_SB_.AMW0._HID returned a string 'PNP0C14' as expected.
PASSED: Test 8, \_SB_.LID0._HID returned an integer 0x0d0cd041 (EISA ID
PNP0C0D).
PASSED: Test 8, \_SB_.PBTN._HID returned an integer 0x0c0cd041 (EISA ID
PNP0C0C).
PASSED: Test 8, \_SB_.SBTN._HID returned an integer 0x0e0cd041 (EISA ID
PNP0C0E).
PASSED: Test 8, \_SB_.AC__._HID returned a string 'ACPI0003' as expected.
PASSED: Test 8, \_SB_.BAT0._HID returned an integer 0x0a0cd041 (EISA ID
PNP0C0A).
PASSED: Test 8, \_SB_.BAT1._HID returned an integer 0x0a0cd041 (EISA ID
PNP0C0A).
PASSED: Test 8, \_SB_.RBTN._HID returned a string 'DELLABCE' as expected.
PASSED: Test 8, \NFC1._HID returned an integer 0x00d0744d (EISA ID SKTD000).
PASSED: Test 8, \NFC2._HID returned an integer 0x4254103b (EISA ID NXP5442).
PASSED: Test 8, \NFC3._HID returned an integer 0x120a7624 (EISA ID ICV0A12).
PASSED: Test 8, \SHAD._HID returned an integer 0xd033d425 (EISA ID INT33D0).

Test 9 of 191: Test _HRV (Hardware Revision Number).
SKIPPED: Test 9, Skipping test for non-existant object _HRV.

Test 10 of 191: Test _MLS (Multiple Language String).
SKIPPED: Test 10, Skipping test for non-existant object _MLS.

Test 11 of 191: Test _PLD (Physical Device Location).
PASSED: Test 11, \_SB_.PCI0.EHC1.HUBN.PR01._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.HUBN.PR01.PR11._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.HUBN.PR01.PR12._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.HUBN.PR01.PR13._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.HUBN.PR01.PR14._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.HUBN.PR01.PR15._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.HUBN.PR01.PR16._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.HUBN.PR01.PR16.WCAM._PLD correctly returned a
sane looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.HUBN.PR01.PR17._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.HUBN.PR01.PR18.PR21._PLD correctly returned a
sane looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.HUBN.PR01.PR18.PR22._PLD correctly returned a
sane looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.HUBN.PR01.PR18.PR23._PLD correctly returned a
sane looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.HUBN.PR01.PR18.PR24._PLD correctly returned a
sane looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.HUBN.PR01.PR18.PR24.PR32._PLD correctly
returned a sane looking package.
PASSED: Test 11, \_SB_.PCI0.EHC2.HUBN.PR01._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC2.HUBN.PR01.PR11._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC2.HUBN.PR01.PR12._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC2.HUBN.PR01.PR13._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC2.HUBN.PR01.PR14._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC2.HUBN.PR01.PR15._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC2.HUBN.PR01.PR16._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.HS01._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.HS02._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.HS03._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.HS04._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.HS05._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.HS06._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.HS07._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.HS08._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.HS08.HUB1.PRT1._PLD correctly returned a
sane looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.HS08.HUB1.PRT2._PLD correctly returned a
sane looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.HS08.HUB1.PRT3._PLD correctly returned a
sane looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.HS08.HUB1.PRT4.SCD2._PLD correctly
returned a sane looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.HS09._PLD correctly returned a sane
looking package.
ACPICA Exception AE_AML_NO_RETURN_VALUE during execution of method _PLD
FAILED [HIGH] AEAMLNoReturnValue: Test 11, Detected error 'No return value' when
evaluating '\_SB_.PCI0.XHC_.RHUB.HS10._PLD'.

ADVICE: A method did not return the required value that was expected.

ACPICA Exception AE_AML_NO_RETURN_VALUE during execution of method _PLD
FAILED [HIGH] AEAMLNoReturnValue: Test 11, Detected error 'No return value' when
evaluating '\_SB_.PCI0.XHC_.RHUB.HS11._PLD'.

ADVICE: A method did not return the required value that was expected.

ACPICA Exception AE_AML_NO_RETURN_VALUE during execution of method _PLD
FAILED [HIGH] AEAMLNoReturnValue: Test 11, Detected error 'No return value' when
evaluating '\_SB_.PCI0.XHC_.RHUB.HS12._PLD'.

ADVICE: A method did not return the required value that was expected.

ACPICA Exception AE_AML_NO_RETURN_VALUE during execution of method _PLD
FAILED [HIGH] AEAMLNoReturnValue: Test 11, Detected error 'No return value' when
evaluating '\_SB_.PCI0.XHC_.RHUB.HS13._PLD'.

ADVICE: A method did not return the required value that was expected.

ACPICA Exception AE_AML_NO_RETURN_VALUE during execution of method _PLD
FAILED [HIGH] AEAMLNoReturnValue: Test 11, Detected error 'No return value' when
evaluating '\_SB_.PCI0.XHC_.RHUB.HS14._PLD'.

ADVICE: A method did not return the required value that was expected.

ACPICA Exception AE_AML_NO_RETURN_VALUE during execution of method _PLD
FAILED [HIGH] AEAMLNoReturnValue: Test 11, Detected error 'No return value' when
evaluating '\_SB_.PCI0.XHC_.RHUB.HS15._PLD'.

ADVICE: A method did not return the required value that was expected.

PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.SSP1._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.SSP2._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.SSP3._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.SSP4._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.SSP5._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.SSP6._PLD correctly returned a sane
looking package.
PASSED: Test 11, \WCAM._PLD correctly returned a sane looking package.

Test 12 of 191: Test _SUB (Subsystem ID).
SKIPPED: Test 12, Skipping test for non-existant object _SUB.

Test 13 of 191: Test _SUN (Slot User Number).
SKIPPED: Test 13, Skipping test for non-existant object _SUN.

Test 14 of 191: Test _STR (String).
SKIPPED: Test 14, Skipping test for non-existant object _STR.

Test 15 of 191: Test _UID (Unique ID).
PASSED: Test 15, \_SB_.PCI0._UID correctly returned sane looking value
0x00000000.
PASSED: Test 15, \_SB_.PCI0.TPMX._UID correctly returned sane looking value
0x00000001.
PASSED: Test 15, \_SB_.PCI0.LPCB.HPET._UID correctly returned sane looking value
0x00000000.
PASSED: Test 15, \_SB_.PCI0.LPCB.LDRC._UID correctly returned sane looking value
0x00000002.
PASSED: Test 15, \_SB_.PCI0.LPCB.RMSC._UID correctly returned sane looking value
0x00000010.
PASSED: Test 15, \_SB_.PCI0.LPCB.ECDV._UID correctly returned sane looking value
0x00000000.
PASSED: Test 15, \_SB_.PCI0.LPCB.UAR1._UID correctly returned sane looking value
0x00000000.
PASSED: Test 15, \_SB_.PCI0.LPCB.LPTE._UID correctly returned sane looking value
0x00000005.
PASSED: Test 15, \_SB_.PCI0.PDRC._UID correctly returned sane looking value
0x00000001.
PASSED: Test 15, \_SB_.PCI0.A_CC._UID correctly returned sane looking value
0x00000001.
PASSED: Test 15, \_SB_.LNKA._UID correctly returned sane looking value
0x00000001.
PASSED: Test 15, \_SB_.LNKB._UID correctly returned sane looking value
0x00000002.
PASSED: Test 15, \_SB_.LNKC._UID correctly returned sane looking value
0x00000003.
PASSED: Test 15, \_SB_.LNKD._UID correctly returned sane looking value
0x00000004.
PASSED: Test 15, \_SB_.LNKE._UID correctly returned sane looking value
0x00000005.
PASSED: Test 15, \_SB_.LNKF._UID correctly returned sane looking value
0x00000006.
PASSED: Test 15, \_SB_.LNKG._UID correctly returned sane looking value
0x00000007.
PASSED: Test 15, \_SB_.LNKH._UID correctly returned sane looking value
0x00000008.
PASSED: Test 15, \_SB_.MEM2._UID correctly returned sane looking value
0x00000002.
PASSED: Test 15, \_SB_.PEPD._UID correctly returned sane looking value
0x00000001.
PASSED: Test 15, \_SB_.AMW0._UID correctly returned sane looking value
0x00000000.
PASSED: Test 15, \_SB_.BAT0._UID correctly returned sane looking value
0x00000001.
PASSED: Test 15, \_SB_.BAT1._UID correctly returned sane looking value
0x00000002.

Test 16 of 191: Test _CDM (Clock Domain).
SKIPPED: Test 16, Skipping test for non-existant object _CDM.

Test 17 of 191: Test _CRS (Current Resource Settings).
PASSED: Test 17, \_SB_.PCI0._CRS (WORD Address Space Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.TPMX._CRS (32-bit Fixed Location Memory Range
Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.DMAC._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.FWHD._CRS (32-bit Fixed Location Memory Range
Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.HPET._CRS (32-bit Fixed Location Memory Range
Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.IPIC._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.MATH._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.LDRC._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.RTC_._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.TIMR._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.CWDT._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.RMSC._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.ECDV._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.PS2K._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.PS2M._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.UAR1._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.LPTE._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.PDRC._CRS (32-bit Fixed Location Memory Range
Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.A_CC._CRS (Extended IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKA._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKB._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKC._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKD._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKE._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKF._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKG._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKH._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.MEM2._CRS (32-bit Fixed Location Memory Range Descriptor)
looks sane.

Test 18 of 191: Test _DSD (Device Specific Data).
SKIPPED: Test 18, Skipping test for non-existant object _DSD.

Test 19 of 191: Test _DIS (Disable).
PASSED: Test 19, \_SB_.PCI0.LPCB.UAR1._DIS returned no values as expected.
PASSED: Test 19, \_SB_.PCI0.LPCB.LPTE._DIS returned no values as expected.
PASSED: Test 19, \_SB_.LNKA._DIS returned no values as expected.
PASSED: Test 19, \_SB_.LNKB._DIS returned no values as expected.
PASSED: Test 19, \_SB_.LNKC._DIS returned no values as expected.
PASSED: Test 19, \_SB_.LNKD._DIS returned no values as expected.
PASSED: Test 19, \_SB_.LNKE._DIS returned no values as expected.
PASSED: Test 19, \_SB_.LNKF._DIS returned no values as expected.
PASSED: Test 19, \_SB_.LNKG._DIS returned no values as expected.
PASSED: Test 19, \_SB_.LNKH._DIS returned no values as expected.

Test 20 of 191: Test _DMA (Direct Memory Access).
SKIPPED: Test 20, Skipping test for non-existant object _DMA.

Test 21 of 191: Test _FIX (Fixed Register Resource Provider).
SKIPPED: Test 21, Skipping test for non-existant object _FIX.

Test 22 of 191: Test _GSB (Global System Interrupt Base).
SKIPPED: Test 22, Skipping test for non-existant object _GSB.

Test 23 of 191: Test _HPP (Hot Plug Parameters).
SKIPPED: Test 23, Skipping test for non-existant object _HPP.

Test 24 of 191: Test _PRS (Possible Resource Settings).
PASSED: Test 24, \_SB_.PCI0.LPCB.PS2K._PRS (Start Dependent Functions
Descriptor) looks sane.
PASSED: Test 24, \_SB_.PCI0.LPCB.PS2M._PRS (Start Dependent Functions
Descriptor) looks sane.
PASSED: Test 24, \_SB_.PCI0.LPCB.UAR1._PRS (Start Dependent Functions
Descriptor) looks sane.
PASSED: Test 24, \_SB_.PCI0.LPCB.LPTE._PRS (Start Dependent Functions
Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKA._PRS (IRQ Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKB._PRS (IRQ Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKC._PRS (IRQ Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKD._PRS (IRQ Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKE._PRS (IRQ Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKF._PRS (IRQ Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKG._PRS (IRQ Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKH._PRS (IRQ Descriptor) looks sane.

Test 25 of 191: Test _PXM (Proximity).
SKIPPED: Test 25, Skipping test for non-existant object _PXM.

Test 26 of 191: Test _CCA (Cache Coherency Attribute).
SKIPPED: Test 26, Skipping test for non-existant object _CCA.

Test 27 of 191: Test _EDL (Eject Device List).
SKIPPED: Test 27, Skipping test for non-existant object _EDL.

Test 28 of 191: Test _EJD (Ejection Dependent Device).
SKIPPED: Test 28, Skipping test for non-existant object _EJD.

Test 29 of 191: Test _EJ0 (Eject).
SKIPPED: Test 29, Skipping test for non-existant object _EJ0.

Test 30 of 191: Test _EJ1 (Eject).
SKIPPED: Test 30, Skipping test for non-existant object _EJ1.

Test 31 of 191: Test _EJ2 (Eject).
SKIPPED: Test 31, Skipping test for non-existant object _EJ2.

Test 32 of 191: Test _EJ3 (Eject).
SKIPPED: Test 32, Skipping test for non-existant object _EJ3.

Test 33 of 191: Test _EJ4 (Eject).
SKIPPED: Test 33, Skipping test for non-existant object _EJ4.

Test 34 of 191: Test _LCK (Lock).
SKIPPED: Test 34, Skipping test for non-existant object _LCK.

Test 35 of 191: Test _RMV (Remove).
PASSED: Test 35, \_SB_.PCI0.RP07.PXSX._RMV correctly returned sane looking value
0x00000001.
PASSED: Test 35, \_SB_.PCI0.EHC2.HUBN.PR01.PR13._RMV correctly returned sane
looking value 0x00000001.
PASSED: Test 35, \_SB_.PCI0.XHC_.RHUB.HS07._RMV correctly returned sane looking
value 0x00000001.
PASSED: Test 35, \_SB_.PCI0.XHC_.RHUB.HS08.HUB1.PRT1._RMV correctly returned
sane looking value 0x00000000.
PASSED: Test 35, \_SB_.PCI0.XHC_.RHUB.HS08.HUB1.PRT4.SCD2._RMV correctly
returned sane looking value 0x00000000.

Test 36 of 191: Test _STA (Status).
PASSED: Test 36, \_SB_.PCI0.TPMX._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 36, \_SB_.PCI0.RP01._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 36, \_SB_.PCI0.RP02._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 36, \_SB_.PCI0.RP03._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 36, \_SB_.PCI0.RP04._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 36, \_SB_.PCI0.RP05._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 36, \_SB_.PCI0.RP06._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 36, \_SB_.PCI0.RP07._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 36, \_SB_.PCI0.RP08._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 36, \_SB_.PCI0.LPCB.HPET._STA correctly returned sane looking value
0x00000000.
PASSED: Test 36, \_SB_.PCI0.LPCB.MATH._STA correctly returned sane looking value
0x00000000.
PASSED: Test 36, \_SB_.PCI0.LPCB.CWDT._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 36, \_SB_.PCI0.LPCB.ECDV._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 36, \_SB_.PCI0.LPCB.PS2K._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 36, \_SB_.PCI0.LPCB.UAR1._STA correctly returned sane looking value
0x00000000.
PASSED: Test 36, \_SB_.PCI0.LPCB.LPTE._STA correctly returned sane looking value
0x0000000d.
PASSED: Test 36, \_SB_.PCI0.XHC_.RHUB.HS01._STA correctly returned sane looking
value 0x0000000f.
PASSED: Test 36, \_SB_.PCI0.XHC_.RHUB.HS02._STA correctly returned sane looking
value 0x0000000f.
PASSED: Test 36, \_SB_.PCI0.XHC_.RHUB.HS03._STA correctly returned sane looking
value 0x0000000f.
PASSED: Test 36, \_SB_.PCI0.XHC_.RHUB.HS04._STA correctly returned sane looking
value 0x0000000f.
PASSED: Test 36, \_SB_.PCI0.XHC_.RHUB.HS05._STA correctly returned sane looking
value 0x0000000f.
PASSED: Test 36, \_SB_.PCI0.XHC_.RHUB.HS06._STA correctly returned sane looking
value 0x0000000f.
PASSED: Test 36, \_SB_.PCI0.XHC_.RHUB.HS07._STA correctly returned sane looking
value 0x0000000f.
PASSED: Test 36, \_SB_.PCI0.XHC_.RHUB.HS08._STA correctly returned sane looking
value 0x0000000f.
PASSED: Test 36, \_SB_.PCI0.XHC_.RHUB.HS08.HUB1.PRT4._STA correctly returned
sane looking value 0x0000000f.
PASSED: Test 36, \_SB_.PCI0.XHC_.RHUB.HS08.HUB1.PRT4.SCD2._STA correctly
returned sane looking value 0x0000000f.
PASSED: Test 36, \_SB_.PCI0.XHC_.RHUB.HS09._STA correctly returned sane looking
value 0x0000000f.
PASSED: Test 36, \_SB_.PCI0.XHC_.RHUB.HS10._STA correctly returned sane looking
value 0x00000000.
PASSED: Test 36, \_SB_.PCI0.XHC_.RHUB.HS11._STA correctly returned sane looking
value 0x00000000.
PASSED: Test 36, \_SB_.PCI0.XHC_.RHUB.HS12._STA correctly returned sane looking
value 0x00000000.
PASSED: Test 36, \_SB_.PCI0.XHC_.RHUB.HS13._STA correctly returned sane looking
value 0x00000000.
PASSED: Test 36, \_SB_.PCI0.XHC_.RHUB.HS14._STA correctly returned sane looking
value 0x00000000.
PASSED: Test 36, \_SB_.PCI0.XHC_.RHUB.HS15._STA correctly returned sane looking
value 0x00000000.
PASSED: Test 36, \_SB_.PCI0.XHC_.RHUB.SSP1._STA correctly returned sane looking
value 0x0000000f.
PASSED: Test 36, \_SB_.PCI0.XHC_.RHUB.SSP2._STA correctly returned sane looking
value 0x0000000f.
PASSED: Test 36, \_SB_.PCI0.XHC_.RHUB.SSP3._STA correctly returned sane looking
value 0x0000000f.
PASSED: Test 36, \_SB_.PCI0.XHC_.RHUB.SSP4._STA correctly returned sane looking
value 0x0000000f.
PASSED: Test 36, \_SB_.PCI0.XHC_.RHUB.SSP5._STA correctly returned sane looking
value 0x00000000.
PASSED: Test 36, \_SB_.PCI0.XHC_.RHUB.SSP6._STA correctly returned sane looking
value 0x00000000.
PASSED: Test 36, \_SB_.PCI0.B0D3._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 36, \_SB_.PCI0.A_CC._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 36, \_SB_.LNKA._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 36, \_SB_.LNKB._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 36, \_SB_.LNKC._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 36, \_SB_.LNKD._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 36, \_SB_.LNKE._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 36, \_SB_.LNKF._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 36, \_SB_.LNKG._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 36, \_SB_.LNKH._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 36, \_SB_.MEM2._STA correctly returned sane looking value
0x00000000.
PASSED: Test 36, \_SB_.PEPD._STA correctly returned sane looking value
0x00000000.
PASSED: Test 36, \_SB_.BTKL._STA correctly returned sane looking value
0x00000000.
PASSED: Test 36, \_SB_.AC__._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 36, \_SB_.BAT0._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 36, \_SB_.BAT1._STA correctly returned sane looking value
0x00000000.
PASSED: Test 36, \_SB_.RBTN._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 36, \NFC1._STA correctly returned sane looking value 0x00000000.
PASSED: Test 36, \NFC2._STA correctly returned sane looking value 0x00000000.
PASSED: Test 36, \NFC3._STA correctly returned sane looking value 0x00000000.
PASSED: Test 36, \SHAD._STA correctly returned sane looking value 0x00000000.

Test 37 of 191: Test _DEP (Operational Region Dependencies).
PASSED: Test 37, \_PR_.CPU0._DEP correctly returned a sane looking package.
PASSED: Test 37, \_PR_.CPU1._DEP correctly returned a sane looking package.
PASSED: Test 37, \_PR_.CPU2._DEP correctly returned a sane looking package.
PASSED: Test 37, \_PR_.CPU3._DEP correctly returned a sane looking package.
PASSED: Test 37, \_PR_.CPU4._DEP correctly returned a sane looking package.
PASSED: Test 37, \_PR_.CPU5._DEP correctly returned a sane looking package.
PASSED: Test 37, \_PR_.CPU6._DEP correctly returned a sane looking package.
PASSED: Test 37, \_PR_.CPU7._DEP correctly returned a sane looking package.
PASSED: Test 37, \_SB_.PCI0.XHC_._DEP correctly returned a sane looking package.
PASSED: Test 37, \_SB_.PCI0.SAT0._DEP correctly returned a sane looking package.
PASSED: Test 37, \_SB_.PCI0.GFX0._DEP correctly returned a sane looking package.

Test 38 of 191: Test _BDN (BIOS Dock Name).
SKIPPED: Test 38, Skipping test for non-existant object _BDN.

Test 39 of 191: Test _BBN (Base Bus Number).
PASSED: Test 39, \_SB_.PCI0._BBN correctly returned an integer.

Test 40 of 191: Test _DCK (Dock).
SKIPPED: Test 40, Skipping test for non-existant object _DCK.

Test 41 of 191: Test _INI (Initialize).
PASSED: Test 41, \_SB_.PCI0.RP01._INI returned no values as expected.
PASSED: Test 41, \_SB_.PCI0.RP02._INI returned no values as expected.
PASSED: Test 41, \_SB_.PCI0.RP03._INI returned no values as expected.
PASSED: Test 41, \_SB_.PCI0.RP04._INI returned no values as expected.
PASSED: Test 41, \_SB_.PCI0.RP05._INI returned no values as expected.
PASSED: Test 41, \_SB_.PCI0.RP06._INI returned no values as expected.
PASSED: Test 41, \_SB_.PCI0.RP07._INI returned no values as expected.
PASSED: Test 41, \_SB_.PCI0.RP08._INI returned no values as expected.
PASSED: Test 41, \_SB_.PCI0.PEG0._INI returned no values as expected.
PASSED: Test 41, \_SB_.PCI0.PEG1._INI returned no values as expected.
PASSED: Test 41, \_SB_.PCI0.PEG2._INI returned no values as expected.
PASSED: Test 41, \_SB_.PCI0.B0D3._INI returned no values as expected.
PASSED: Test 41, \_SB_.PCI0._INI returned no values as expected.
PASSED: Test 41, \_SB_.RBTN._INI returned no values as expected.
PASSED: Test 41, \_SB_._INI returned no values as expected.

Test 42 of 191: Test _GLK (Global Lock).
SKIPPED: Test 42, Skipping test for non-existant object _GLK.

Test 43 of 191: Test _SEG (Segment).
SKIPPED: Test 43, Skipping test for non-existant object _SEG.

Test 44 of 191: Test _OFF (Set resource off).
SKIPPED: Test 44, Skipping test for non-existant object _OFF.

Test 45 of 191: Test _ON (Set resource on).
SKIPPED: Test 45, Skipping test for non-existant object _ON.

Test 46 of 191: Test _DSW (Device Sleep Wake).
SKIPPED: Test 46, Skipping test for non-existant object _DSW.

Test 47 of 191: Test _IRC (In Rush Current).
SKIPPED: Test 47, Skipping test for non-existant object _IRC.

Test 48 of 191: Test _PRE (Power Resources for Enumeration).
SKIPPED: Test 48, Skipping test for non-existant object _PRE.

Test 49 of 191: Test _PR0 (Power Resources for D0).
SKIPPED: Test 49, Skipping test for non-existant object _PR0.

Test 50 of 191: Test _PR1 (Power Resources for D1).
SKIPPED: Test 50, Skipping test for non-existant object _PR1.

Test 51 of 191: Test _PR2 (Power Resources for D2).
SKIPPED: Test 51, Skipping test for non-existant object _PR2.

Test 52 of 191: Test _PR3 (Power Resources for D3).
SKIPPED: Test 52, Skipping test for non-existant object _PR3.

Test 53 of 191: Test _PRW (Power Resources for Wake).
PASSED: Test 53, \_SB_.PCI0.RP01.PXSX._PRW correctly returned a sane looking
package.
PASSED: Test 53, \_SB_.PCI0.RP01._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.RP02.PXSX._PRW correctly returned a sane looking
package.
PASSED: Test 53, \_SB_.PCI0.RP02._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.RP03.PXSX._PRW correctly returned a sane looking
package.
PASSED: Test 53, \_SB_.PCI0.RP03._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.RP04.PXSX._PRW correctly returned a sane looking
package.
PASSED: Test 53, \_SB_.PCI0.RP04._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.RP05.PXSX._PRW correctly returned a sane looking
package.
PASSED: Test 53, \_SB_.PCI0.RP05._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.RP06.PXSX._PRW correctly returned a sane looking
package.
PASSED: Test 53, \_SB_.PCI0.RP06._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.RP07.PXSX._PRW correctly returned a sane looking
package.
PASSED: Test 53, \_SB_.PCI0.RP07._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.RP08.PXSX._PRW correctly returned a sane looking
package.
PASSED: Test 53, \_SB_.PCI0.RP08._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.LPCB.UAR1._PRW correctly returned a sane looking
package.
PASSED: Test 53, \_SB_.PCI0.GLAN._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.EHC1._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.EHC2._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.XHC_._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.HDEF._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.PEG0._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.PEG0.PEGP._PRW correctly returned a sane looking
package.
PASSED: Test 53, \_SB_.PCI0.PEG1._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.PEG2._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.LID0._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PBTN._PRW correctly returned a sane looking package.

Test 54 of 191: Test _PS0 (Power State 0).
PASSED: Test 54, \_SB_.PCI0.LPCB.UAR1._PS0 returned no values as expected.
PASSED: Test 54, \_SB_.PCI0.LPCB.LPTE._PS0 returned no values as expected.
PASSED: Test 54, \_SB_.PCI0.EHC1._PS0 returned no values as expected.
PASSED: Test 54, \_SB_.PCI0.EHC2._PS0 returned no values as expected.
PASSED: Test 54, \_SB_.PCI0.XHC_._PS0 returned no values as expected.
PASSED: Test 54, \_SB_.BTKL._PS0 returned no values as expected.

Test 55 of 191: Test _PS1 (Power State 1).
SKIPPED: Test 55, Skipping test for non-existant object _PS1.

Test 56 of 191: Test _PS2 (Power State 2).
SKIPPED: Test 56, Skipping test for non-existant object _PS2.

Test 57 of 191: Test _PS3 (Power State 3).
PASSED: Test 57, \_SB_.PCI0.LPCB.UAR1._PS3 returned no values as expected.
PASSED: Test 57, \_SB_.PCI0.LPCB.LPTE._PS3 returned no values as expected.
PASSED: Test 57, \_SB_.PCI0.EHC1._PS3 returned no values as expected.
PASSED: Test 57, \_SB_.PCI0.EHC2._PS3 returned no values as expected.
PASSED: Test 57, \_SB_.PCI0.XHC_._PS3 returned no values as expected.
PASSED: Test 57, \_SB_.BTKL._PS3 returned no values as expected.

Test 58 of 191: Test _PSC (Power State Current).
SKIPPED: Test 58, Skipping test for non-existant object _PSC.

Test 59 of 191: Test _PSE (Power State for Enumeration).
SKIPPED: Test 59, Skipping test for non-existant object _PSE.

Test 60 of 191: Test _PSW (Power State Wake).
PASSED: Test 60, \_SB_.PCI0.RP02.PXSX._PSW returned no values as expected.
PASSED: Test 60, \_SB_.PCI0.GLAN._PSW returned no values as expected.
PASSED: Test 60, \_SB_.PCI0.PEG0._PSW returned no values as expected.
PASSED: Test 60, \_SB_.PCI0.PEG1._PSW returned no values as expected.
PASSED: Test 60, \_SB_.PCI0.PEG2._PSW returned no values as expected.
PASSED: Test 60, \_SB_.LID0._PSW returned no values as expected.
PASSED: Test 60, \_SB_.PBTN._PSW returned no values as expected.

Test 61 of 191: Test _S1D (S1 Device State).
PASSED: Test 61, \_SB_.PCI0.EHC1._S1D correctly returned an integer.
PASSED: Test 61, \_SB_.PCI0.EHC2._S1D correctly returned an integer.

Test 62 of 191: Test _S2D (S2 Device State).
SKIPPED: Test 62, Skipping test for non-existant object _S2D.

Test 63 of 191: Test _S3D (S3 Device State).
PASSED: Test 63, \_SB_.PCI0.EHC1._S3D correctly returned an integer.
PASSED: Test 63, \_SB_.PCI0.EHC2._S3D correctly returned an integer.
PASSED: Test 63, \_SB_.PCI0.XHC_._S3D correctly returned an integer.

Test 64 of 191: Test _S4D (S4 Device State).
SKIPPED: Test 64, Skipping test for non-existant object _S4D.

Test 65 of 191: Test _S0W (S0 Device Wake State).
SKIPPED: Test 65, Skipping test for non-existant object _S0W.

Test 66 of 191: Test _S1W (S1 Device Wake State).
SKIPPED: Test 66, Skipping test for non-existant object _S1W.

Test 67 of 191: Test _S2W (S2 Device Wake State).
SKIPPED: Test 67, Skipping test for non-existant object _S2W.

Test 68 of 191: Test _S3W (S3 Device Wake State).
SKIPPED: Test 68, Skipping test for non-existant object _S3W.

Test 69 of 191: Test _S4W (S4 Device Wake State).
SKIPPED: Test 69, Skipping test for non-existant object _S4W.

Test 70 of 191: Test _RST (Device Reset).
SKIPPED: Test 70, Skipping test for non-existant object _RST.

Test 71 of 191: Test _PRR (Power Resource for Reset).
SKIPPED: Test 71, Skipping test for non-existant object _PRR.

Test 72 of 191: Test _S0_ (S0 System State).
\_S0_ PM1a_CNT.SLP_TYP value: 0x00000000
\_S0_ PM1b_CNT.SLP_TYP value: 0x00000000
PASSED: Test 72, \_S0_ correctly returned a sane looking package.

Test 73 of 191: Test _S1_ (S1 System State).
SKIPPED: Test 73, Skipping test for non-existant object _S1_.

Test 74 of 191: Test _S2_ (S2 System State).
SKIPPED: Test 74, Skipping test for non-existant object _S2_.

Test 75 of 191: Test _S3_ (S3 System State).
\_S3_ PM1a_CNT.SLP_TYP value: 0x00000005
\_S3_ PM1b_CNT.SLP_TYP value: 0x00000000
PASSED: Test 75, \_S3_ correctly returned a sane looking package.

Test 76 of 191: Test _S4_ (S4 System State).
\_S4_ PM1a_CNT.SLP_TYP value: 0x00000006
\_S4_ PM1b_CNT.SLP_TYP value: 0x00000000
PASSED: Test 76, \_S4_ correctly returned a sane looking package.

Test 77 of 191: Test _S5_ (S5 System State).
\_S5_ PM1a_CNT.SLP_TYP value: 0x00000007
\_S5_ PM1b_CNT.SLP_TYP value: 0x00000000
PASSED: Test 77, \_S5_ correctly returned a sane looking package.

Test 78 of 191: Test _SWS (System Wake Source).
SKIPPED: Test 78, Skipping test for non-existant object _SWS.

Test 79 of 191: Test _PSS (Performance Supported States).
\_PR_.CPU0._PSS values:
P-State  Freq     Power  Latency   Bus Master
         (MHz)    (mW)    (us)    Latency (us)
   0      2601    15000    10        10
   1      2600    15000    10        10
   2      2500    14236    10        10
   3      2300    12752    10        10
   4      2200    12031    10        10
   5      2000    10635    10        10
   6      1900    10095    10        10
   7      1800     9429    10        10
   8      1600     8138    10        10
   9      1500     7514    10        10
  10      1400     6902    10        10
  11      1200     5845    10        10
  12      1100     5271    10        10
  13      1000     4709    10        10
  14       800     3626    10        10
  15       754     3103    10        10
PASSED: Test 79, \_PR_.CPU0._PSS correctly returned a sane looking package.

Test 80 of 191: Test _CPC (Continuous Performance Control).
SKIPPED: Test 80, Skipping test for non-existant object _CPC.

Test 81 of 191: Test _CSD (C State Dependencies).
SKIPPED: Test 81, Skipping test for non-existant object _CSD.

Test 82 of 191: Test _CST (C States).
SKIPPED: Test 82, Skipping test for non-existant object _CST.

Test 83 of 191: Test _PCT (Performance Control).
FAILED [MEDIUM] MethodReturnNullObj: Test 83, \_PR_.CPU0._PCT returned a NULL
object, and did not return ACPI_TYPE_PACKAGE.

Test 84 of 191: Test _PDL (P-State Depth Limit).
SKIPPED: Test 84, Skipping test for non-existant object _PDL.

Test 85 of 191: Test _PPC (Performance Present Capabilities).
PASSED: Test 85, \_PR_.CPU0._PPC correctly returned an integer.

Test 86 of 191: Test _PPE (Polling for Platform Error).
SKIPPED: Test 86, Skipping test for non-existant object _PPE.

Test 87 of 191: Test _PSD (Power State Dependencies).
PASSED: Test 87, \_PR_.CPU0._PSD correctly returned a sane looking package.

Test 88 of 191: Test _PTC (Processor Throttling Control).
SKIPPED: Test 88, Skipping test for non-existant object _PTC.

Test 89 of 191: Test _TDL (T-State Depth Limit).
SKIPPED: Test 89, Skipping test for non-existant object _TDL.

Test 90 of 191: Test _TPC (Throttling Present Capabilities).
SKIPPED: Test 90, Skipping test for non-existant object _TPC.

Test 91 of 191: Test _TSD (Throttling State Dependencies).
SKIPPED: Test 91, Skipping test for non-existant object _TSD.

Test 92 of 191: Test _TSS (Throttling Supported States).
SKIPPED: Test 92, Skipping test for non-existant object _TSS.

Test 93 of 191: Test _PUR (Processor Utilization Request).
SKIPPED: Test 93, Skipping test for non-existant object _PUR.

Test 94 of 191: Test _MSG (Message).
SKIPPED: Test 94, Skipping test for non-existant object _MSG.

Test 95 of 191: Test _SST (System Status).
SKIPPED: Test 95, Skipping test for non-existant object _SST.

Test 96 of 191: Test _ALC (Ambient Light Colour Chromaticity).
SKIPPED: Test 96, Skipping test for non-existant object _ALC.

Test 97 of 191: Test _ALI (Ambient Light Illuminance).
SKIPPED: Test 97, Skipping test for non-existant object _ALI.

Test 98 of 191: Test _ALT (Ambient Light Temperature).
SKIPPED: Test 98, Skipping test for non-existant object _ALT.

Test 99 of 191: Test _ALP (Ambient Light Polling).
SKIPPED: Test 99, Skipping test for non-existant object _ALP.

Test 100 of 191: Test _ALR (Ambient Light Response).
SKIPPED: Test 100, Skipping test for non-existant object _ALR.

Test 101 of 191: Test _LID (Lid Status).
PASSED: Test 101, \_SB_.LID0._LID correctly returned sane looking value
0x00000000.

Test 102 of 191: Test _GTF (Get Task File).
PASSED: Test 102, \_SB_.PCI0.SAT0.PRT0._GTF correctly returned a sane looking
buffer.
PASSED: Test 102, \_SB_.PCI0.SAT0.PRT1._GTF correctly returned a sane looking
buffer.
PASSED: Test 102, \_SB_.PCI0.SAT0.PRT2._GTF correctly returned a sane looking
buffer.
PASSED: Test 102, \_SB_.PCI0.SAT0.PRT3._GTF correctly returned a sane looking
buffer.
PASSED: Test 102, \_SB_.PCI0.SAT0.SPT0._GTF correctly returned a sane looking
buffer.
PASSED: Test 102, \_SB_.PCI0.SAT0.SPT1._GTF correctly returned a sane looking
buffer.
PASSED: Test 102, \_SB_.PCI0.SAT0.SPT3._GTF correctly returned a sane looking
buffer.
PASSED: Test 102, \_SB_.PCI0.SAT0.SPT4._GTF correctly returned a sane looking
buffer.
PASSED: Test 102, \_SB_.PCI0.SAT0.SPT5._GTF correctly returned a sane looking
buffer.

Test 103 of 191: Test _GTM (Get Timing Mode).
PASSED: Test 103, \_SB_.PCI0.SAT0._GTM correctly returned a sane looking buffer.

Test 104 of 191: Test _MBM (Memory Bandwidth Monitoring Data).
SKIPPED: Test 104, Skipping test for non-existant object _MBM.

Test 105 of 191: Test _UPC (USB Port Capabilities).
PASSED: Test 105, \_SB_.PCI0.EHC1.HUBN.PR01._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC1.HUBN.PR01.PR11._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC1.HUBN.PR01.PR12._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC1.HUBN.PR01.PR13._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC1.HUBN.PR01.PR14._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC1.HUBN.PR01.PR15._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC1.HUBN.PR01.PR16._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC1.HUBN.PR01.PR16.WCAM._UPC correctly returned a
sane looking package.
PASSED: Test 105, \_SB_.PCI0.EHC1.HUBN.PR01.PR17._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC1.HUBN.PR01.PR18._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC1.HUBN.PR01.PR18.PR21._UPC correctly returned a
sane looking package.
PASSED: Test 105, \_SB_.PCI0.EHC1.HUBN.PR01.PR18.PR22._UPC correctly returned a
sane looking package.
PASSED: Test 105, \_SB_.PCI0.EHC1.HUBN.PR01.PR18.PR23._UPC correctly returned a
sane looking package.
PASSED: Test 105, \_SB_.PCI0.EHC1.HUBN.PR01.PR18.PR24._UPC correctly returned a
sane looking package.
PASSED: Test 105, \_SB_.PCI0.EHC1.HUBN.PR01.PR18.PR24.PR32._UPC correctly
returned a sane looking package.
PASSED: Test 105, \_SB_.PCI0.EHC2.HUBN.PR01._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC2.HUBN.PR01.PR11._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC2.HUBN.PR01.PR12._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC2.HUBN.PR01.PR13._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC2.HUBN.PR01.PR14._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC2.HUBN.PR01.PR15._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC2.HUBN.PR01.PR16._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.HS01._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.HS02._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.HS03._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.HS04._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.HS05._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.HS06._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.HS07._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.HS08._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.HS08.HUB1._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.HS08.HUB1.PRT1._UPC correctly returned a
sane looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.HS08.HUB1.PRT2._UPC correctly returned a
sane looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.HS08.HUB1.PRT3._UPC correctly returned a
sane looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.HS08.HUB1.PRT4._UPC correctly returned a
sane looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.HS08.HUB1.PRT4.SCD2._UPC correctly
returned a sane looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.HS09._UPC correctly returned a sane
looking package.
ACPICA Exception AE_AML_NO_RETURN_VALUE during execution of method _UPC
FAILED [HIGH] AEAMLNoReturnValue: Test 105, Detected error 'No return value'
when evaluating '\_SB_.PCI0.XHC_.RHUB.HS10._UPC'.

ADVICE: A method did not return the required value that was expected.

ACPICA Exception AE_AML_NO_RETURN_VALUE during execution of method _UPC
FAILED [HIGH] AEAMLNoReturnValue: Test 105, Detected error 'No return value'
when evaluating '\_SB_.PCI0.XHC_.RHUB.HS11._UPC'.

ADVICE: A method did not return the required value that was expected.

ACPICA Exception AE_AML_NO_RETURN_VALUE during execution of method _UPC
FAILED [HIGH] AEAMLNoReturnValue: Test 105, Detected error 'No return value'
when evaluating '\_SB_.PCI0.XHC_.RHUB.HS12._UPC'.

ADVICE: A method did not return the required value that was expected.

ACPICA Exception AE_AML_NO_RETURN_VALUE during execution of method _UPC
FAILED [HIGH] AEAMLNoReturnValue: Test 105, Detected error 'No return value'
when evaluating '\_SB_.PCI0.XHC_.RHUB.HS13._UPC'.

ADVICE: A method did not return the required value that was expected.

ACPICA Exception AE_AML_NO_RETURN_VALUE during execution of method _UPC
FAILED [HIGH] AEAMLNoReturnValue: Test 105, Detected error 'No return value'
when evaluating '\_SB_.PCI0.XHC_.RHUB.HS14._UPC'.

ADVICE: A method did not return the required value that was expected.

ACPICA Exception AE_AML_NO_RETURN_VALUE during execution of method _UPC
FAILED [HIGH] AEAMLNoReturnValue: Test 105, Detected error 'No return value'
when evaluating '\_SB_.PCI0.XHC_.RHUB.HS15._UPC'.

ADVICE: A method did not return the required value that was expected.

PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.SSP1._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.SSP2._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.SSP3._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.SSP4._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.SSP5._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.SSP6._UPC correctly returned a sane
looking package.
PASSED: Test 105, \WCAM._UPC correctly returned a sane looking package.

Test 106 of 191: Test _UPD (User Presence Detect).
SKIPPED: Test 106, Skipping test for non-existant object _UPD.

Test 107 of 191: Test _UPP (User Presence Polling).
SKIPPED: Test 107, Skipping test for non-existant object _UPP.

Test 108 of 191: Test _GCP (Get Capabilities).
SKIPPED: Test 108, Skipping test for non-existant object _GCP.

Test 109 of 191: Test _GRT (Get Real Time).
SKIPPED: Test 109, Skipping test for non-existant object _GRT.

Test 110 of 191: Test _GWS (Get Wake Status).
SKIPPED: Test 110, Skipping test for non-existant object _GWS.

Test 111 of 191: Test _CWS (Clear Wake Status).
SKIPPED: Test 111, Skipping test for non-existant object _CWS.

Test 112 of 191: Test _STP (Set Expired Timer Wake Policy).
SKIPPED: Test 112, Skipping test for non-existant object _STP.

Test 113 of 191: Test _STV (Set Timer Value).
SKIPPED: Test 113, Skipping test for non-existant object _STV.

Test 114 of 191: Test _TIP (Expired Timer Wake Policy).
SKIPPED: Test 114, Skipping test for non-existant object _TIP.

Test 115 of 191: Test _TIV (Timer Values).
SKIPPED: Test 115, Skipping test for non-existant object _TIV.

Test 116 of 191: Test _SBS (Smart Battery Subsystem).
SKIPPED: Test 116, Skipping test for non-existant object _SBS.

Test 117 of 191: Test _BCT (Battery Charge Time).
SKIPPED: Test 117, Skipping test for non-existant object _BCT.

Test 118 of 191: Test _BIF (Battery Information).
PASSED: Test 118, \_SB_.BAT0._BIF correctly returned a sane looking package.
PASSED: Test 118, \_SB_.BAT1._BIF correctly returned a sane looking package.

Test 119 of 191: Test _BIX (Battery Information Extended).
SKIPPED: Test 119, Skipping test for non-existant object _BIX.

Test 120 of 191: Test _BMA (Battery Measurement Averaging).
SKIPPED: Test 120, Skipping test for non-existant object _BMA.

Test 121 of 191: Test _BMC (Battery Maintenance Control).
SKIPPED: Test 121, Skipping test for non-existant object _BMC.

Test 122 of 191: Test _BMD (Battery Maintenance Data).
SKIPPED: Test 122, Skipping test for non-existant object _BMD.

Test 123 of 191: Test _BMS (Battery Measurement Sampling Time).
SKIPPED: Test 123, Skipping test for non-existant object _BMS.

Test 124 of 191: Test _BST (Battery Status).
PASSED: Test 124, \_SB_.BAT0._BST correctly returned a sane looking package.
PASSED: Test 124, \_SB_.BAT1._BST correctly returned a sane looking package.

Test 125 of 191: Test _BTP (Battery Trip Point).
SKIPPED: Test 125, Skipping test for non-existant object _BTP.

Test 126 of 191: Test _BTH (Battery Throttle Limit).
SKIPPED: Test 126, Skipping test for non-existant object _BTH.

Test 127 of 191: Test _BTM (Battery Time).
SKIPPED: Test 127, Skipping test for non-existant object _BTM.

Test 128 of 191: Test _PCL (Power Consumer List).
PASSED: Test 128, \_SB_.AC__._PCL returned a sane package of 3 references.
PASSED: Test 128, \_SB_.BAT0._PCL returned a sane package of 1 references.
PASSED: Test 128, \_SB_.BAT1._PCL returned a sane package of 1 references.

Test 129 of 191: Test _PIF (Power Source Information).
SKIPPED: Test 129, Skipping test for non-existant object _PIF.

Test 130 of 191: Test _PRL (Power Source Redundancy List).
SKIPPED: Test 130, Skipping test for non-existant object _PRL.

Test 131 of 191: Test _PSR (Power Source).
PASSED: Test 131, \_SB_.AC__._PSR correctly returned sane looking value
0x00000000.

Test 132 of 191: Test _GAI (Get Averaging Level).
SKIPPED: Test 132, Skipping test for non-existant object _GAI.

Test 133 of 191: Test _GHL (Get Harware Limit).
SKIPPED: Test 133, Skipping test for non-existant object _GHL.

Test 134 of 191: Test _PMD (Power Meter Devices).
SKIPPED: Test 134, Skipping test for non-existant object _PMD.

Test 135 of 191: Test _PMM (Power Meter Measurement).
SKIPPED: Test 135, Skipping test for non-existant object _PMM.

Test 136 of 191: Test _FIF (Fan Information).
SKIPPED: Test 136, Skipping test for non-existant object _FIF.

Test 137 of 191: Test _FPS (Fan Performance States).
SKIPPED: Test 137, Skipping test for non-existant object _FPS.

Test 138 of 191: Test _FSL (Fan Set Level).
SKIPPED: Test 138, Skipping test for non-existant object _FSL.

Test 139 of 191: Test _FST (Fan Status).
SKIPPED: Test 139, Skipping test for non-existant object _FST.

Test 140 of 191: Test _ACx (Active Cooling).
SKIPPED: Test 140, Skipping test for non-existant object _AC0.

SKIPPED: Test 140, Skipping test for non-existant object _AC1.

SKIPPED: Test 140, Skipping test for non-existant object _AC2.

SKIPPED: Test 140, Skipping test for non-existant object _AC3.

SKIPPED: Test 140, Skipping test for non-existant object _AC4.

SKIPPED: Test 140, Skipping test for non-existant object _AC5.

SKIPPED: Test 140, Skipping test for non-existant object _AC6.

SKIPPED: Test 140, Skipping test for non-existant object _AC7.

SKIPPED: Test 140, Skipping test for non-existant object _AC8.

SKIPPED: Test 140, Skipping test for non-existant object _AC9.


Test 141 of 191: Test _ART (Active Cooling Relationship Table).
SKIPPED: Test 141, Skipping test for non-existant object _ART.

Test 142 of 191: Test _CRT (Critical Trip Point).
PASSED: Test 142, _CRT correctly returned sane looking value 0x00000eda (380.2
degrees K)

Test 143 of 191: Test _CR3 (Warm/Standby Temperature).
SKIPPED: Test 143, Skipping test for non-existant object _CR3.

Test 144 of 191: Test _DTI (Device Temperature Indication).
SKIPPED: Test 144, Skipping test for non-existant object _DTI.

Test 145 of 191: Test _HOT (Hot Temperature).
SKIPPED: Test 145, Skipping test for non-existant object _HOT.

Test 146 of 191: Test _MTL (Minimum Throttle Limit).
SKIPPED: Test 146, Skipping test for non-existant object _MTL.

Test 147 of 191: Test _NTT (Notification Temp Threshold).
SKIPPED: Test 147, Skipping test for non-existant object _NTT.

Test 148 of 191: Test _PSL (Passive List).
SKIPPED: Test 148, Skipping test for non-existant object _PSL.

Test 149 of 191: Test _PSV (Passive Temp).
SKIPPED: Test 149, Skipping test for non-existant object _PSV.

Test 150 of 191: Test _RTV (Relative Temp Values).
SKIPPED: Test 150, Skipping test for non-existant object _RTV.

Test 151 of 191: Test _SCP (Set Cooling Policy).
SKIPPED: Test 151, Skipping test for non-existant object _DTI.

Test 152 of 191: Test _TC1 (Thermal Constant 1).
SKIPPED: Test 152, Skipping test for non-existant object _TC1.

Test 153 of 191: Test _TC2 (Thermal Constant 2).
SKIPPED: Test 153, Skipping test for non-existant object _TC2.

Test 154 of 191: Test _TFP (Thermal fast Sampling Period).
SKIPPED: Test 154, Skipping test for non-existant object _TFP.

Test 155 of 191: Test _TMP (Thermal Zone Current Temp).
PASSED: Test 155, \_TZ_.THM_._TMP correctly returned a sane looking return type.

Test 156 of 191: Test _TPT (Trip Point Temperature).
SKIPPED: Test 156, Skipping test for non-existant object _TPT.

Test 157 of 191: Test _TRT (Thermal Relationship Table).
SKIPPED: Test 157, Skipping test for non-existant object _TRT.

Test 158 of 191: Test _TSN (Thermal Sensor Device).
SKIPPED: Test 158, Skipping test for non-existant object _TSN.

Test 159 of 191: Test _TSP (Thermal Sampling Period).
SKIPPED: Test 159, Skipping test for non-existant object _TSP.

Test 160 of 191: Test _TST (Temperature Sensor Threshold).
SKIPPED: Test 160, Skipping test for non-existant object _TST.

Test 161 of 191: Test _TZD (Thermal Zone Devices).
SKIPPED: Test 161, Skipping test for non-existant object _TZD.

Test 162 of 191: Test _TZM (Thermal Zone member).
SKIPPED: Test 162, Skipping test for non-existant object _TZM.

Test 163 of 191: Test _TZP (Thermal Zone Polling).
SKIPPED: Test 163, Skipping test for non-existant object _TZP.

Test 164 of 191: Test _GPE (General Purpose Events).
PASSED: Test 164, \_SB_.PCI0.LPCB.ECDV._GPE returned an integer 0x00000027

Test 165 of 191: Test _EC (EC Offset Query).
SKIPPED: Test 165, Skipping test for non-existant object _EC.

Test 166 of 191: Test _PTS (Prepare to Sleep).
Test _PTS(1).
PASSED: Test 166, \_PTS returned no values as expected.

Test _PTS(2).
PASSED: Test 166, \_PTS returned no values as expected.

Test _PTS(3).
PASSED: Test 166, \_PTS returned no values as expected.

Test _PTS(4).
PASSED: Test 166, \_PTS returned no values as expected.

Test _PTS(5).
PASSED: Test 166, \_PTS returned no values as expected.


Test 167 of 191: Test _TTS (Transition to State).
SKIPPED: Test 167, Optional control method _TTS does not exist.

Test 168 of 191: Test _S0 (System S0 State).
SKIPPED: Test 168, Skipping test for non-existant object _S0.

Test 169 of 191: Test _S1 (System S1 State).
SKIPPED: Test 169, Skipping test for non-existant object _S1.

Test 170 of 191: Test _S2 (System S2 State).
SKIPPED: Test 170, Skipping test for non-existant object _S2.

Test 171 of 191: Test _S3 (System S3 State).
SKIPPED: Test 171, Skipping test for non-existant object _S3.

Test 172 of 191: Test _S4 (System S4 State).
SKIPPED: Test 172, Skipping test for non-existant object _S4.

Test 173 of 191: Test _S5 (System S5 State).
SKIPPED: Test 173, Skipping test for non-existant object _S5.

Test 174 of 191: Test _WAK (System Wake).
Test _WAK(1) System Wake, State S1.
PASSED: Test 174, \_WAK correctly returned a sane looking package.

Test _WAK(2) System Wake, State S2.
PASSED: Test 174, \_WAK correctly returned a sane looking package.

Test _WAK(3) System Wake, State S3.
PASSED: Test 174, \_WAK correctly returned a sane looking package.

Test _WAK(4) System Wake, State S4.
PASSED: Test 174, \_WAK correctly returned a sane looking package.

Test _WAK(5) System Wake, State S5.
PASSED: Test 174, \_WAK correctly returned a sane looking package.


Test 175 of 191: Test _ADR (Return Unique ID for Device).
PASSED: Test 175, \_SB_.PCI0._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP01._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP01.PXSX._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP02._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP02.PXSX._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP03._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP03.PXSX._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP04._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP04.PXSX._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP05._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP05.PXSX._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP06._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP06.PXSX._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP07._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP07.PXSX._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP08._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP08.PXSX._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.B0D4._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.LPCB._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.GLAN._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.EHC1._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.HUBN._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.HUBN.PR01._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.HUBN.PR01.PR11._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.HUBN.PR01.PR12._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.HUBN.PR01.PR13._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.HUBN.PR01.PR14._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.HUBN.PR01.PR15._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.HUBN.PR01.PR16._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.HUBN.PR01.PR16.WCAM._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.HUBN.PR01.PR17._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.HUBN.PR01.PR18._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.HUBN.PR01.PR18.PR21._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.HUBN.PR01.PR18.PR22._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.HUBN.PR01.PR18.PR23._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.HUBN.PR01.PR18.PR24._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.HUBN.PR01.PR18.PR24.PR32._ADR correctly
returned an integer.
PASSED: Test 175, \_SB_.PCI0.EHC2._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.EHC2.HUBN._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.EHC2.HUBN.PR01._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.EHC2.HUBN.PR01.PR11._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC2.HUBN.PR01.PR12._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC2.HUBN.PR01.PR13._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC2.HUBN.PR01.PR14._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC2.HUBN.PR01.PR15._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC2.HUBN.PR01.PR16._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.XHC_._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HS01._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HS02._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HS03._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HS04._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HS05._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HS06._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HS07._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HS08._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HS08.HUB1._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HS08.HUB1.PRT1._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HS08.HUB1.PRT2._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HS08.HUB1.PRT3._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HS08.HUB1.PRT4._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HS08.HUB1.PRT4.SCD2._ADR correctly
returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HS09._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HS10._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HS11._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HS12._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HS13._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HS14._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HS15._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.SSP1._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.SSP2._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.SSP3._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.SSP4._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.SSP5._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.SSP6._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.HDEF._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.SAT0._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.SAT0.PRT0._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.SAT0.PRT1._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.SAT0.PRT2._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.SAT0.PRT3._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.SAT0.SPT0._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.SAT0.SPT1._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.SAT0.SPT3._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.SAT0.SPT4._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.SAT0.SPT5._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.SAT1._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.SBUS._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.PEG0._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.PEG0.PEGP._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.PEG1._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.PEG2._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.B0D3._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.GFX0._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.GFX0.CRT_._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.GFX0.LCD_._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.GFX0.DVI_._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.GFX0.DVI2._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.GFX0.DVI3._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.GFX0.DP__._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.GFX0.DP2_._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.GFX0.DP3_._ADR correctly returned an integer.
PASSED: Test 175, \WCAM._ADR correctly returned an integer.

Test 176 of 191: Test _BCL (Query List of Brightness Control Levels Supported).
Brightness levels for \_SB_.PCI0.GFX0.LCD_._BCL:
  Level on full power   : 80
  Level on battery power: 50
  Brightness Levels     : 5, 5, 5, 5, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100
PASSED: Test 176, \_SB_.PCI0.GFX0.LCD_._BCL returned a sane package of 103
integers.

Test 177 of 191: Test _BCM (Set Brightness Level).
PASSED: Test 177, \_SB_.PCI0.GFX0.LCD_._BCM returned no values as expected.

Test 178 of 191: Test _BQC (Brightness Query Current Level).
PASSED: Test 178, \_SB_.PCI0.GFX0.LCD_._BQC correctly returned an integer.

Test 179 of 191: Test _DCS (Return the Status of Output Device).
PASSED: Test 179, \_SB_.PCI0.GFX0.CRT_._DCS correctly returned an integer.
PASSED: Test 179, \_SB_.PCI0.GFX0.LCD_._DCS correctly returned an integer.
PASSED: Test 179, \_SB_.PCI0.GFX0.DVI_._DCS correctly returned an integer.
PASSED: Test 179, \_SB_.PCI0.GFX0.DVI2._DCS correctly returned an integer.
PASSED: Test 179, \_SB_.PCI0.GFX0.DVI3._DCS correctly returned an integer.
PASSED: Test 179, \_SB_.PCI0.GFX0.DP__._DCS correctly returned an integer.
PASSED: Test 179, \_SB_.PCI0.GFX0.DP2_._DCS correctly returned an integer.
PASSED: Test 179, \_SB_.PCI0.GFX0.DP3_._DCS correctly returned an integer.

Test 180 of 191: Test _DDC (Return the EDID for this Device).
SKIPPED: Test 180, Skipping test for non-existant object _DDC.

Test 181 of 191: Test _DSS (Device Set State).
PASSED: Test 181, \_SB_.PCI0.GFX0.CRT_._DSS returned no values as expected.
PASSED: Test 181, \_SB_.PCI0.GFX0.LCD_._DSS returned no values as expected.
PASSED: Test 181, \_SB_.PCI0.GFX0.DVI_._DSS returned no values as expected.
PASSED: Test 181, \_SB_.PCI0.GFX0.DVI2._DSS returned no values as expected.
PASSED: Test 181, \_SB_.PCI0.GFX0.DVI3._DSS returned no values as expected.
PASSED: Test 181, \_SB_.PCI0.GFX0.DP__._DSS returned no values as expected.
PASSED: Test 181, \_SB_.PCI0.GFX0.DP2_._DSS returned no values as expected.
PASSED: Test 181, \_SB_.PCI0.GFX0.DP3_._DSS returned no values as expected.

Test 182 of 191: Test _DGS (Query Graphics State).
PASSED: Test 182, \_SB_.PCI0.GFX0.CRT_._DGS correctly returned an integer.
PASSED: Test 182, \_SB_.PCI0.GFX0.LCD_._DGS correctly returned an integer.
PASSED: Test 182, \_SB_.PCI0.GFX0.DVI_._DGS correctly returned an integer.
PASSED: Test 182, \_SB_.PCI0.GFX0.DVI2._DGS correctly returned an integer.
PASSED: Test 182, \_SB_.PCI0.GFX0.DVI3._DGS correctly returned an integer.
PASSED: Test 182, \_SB_.PCI0.GFX0.DP__._DGS correctly returned an integer.
PASSED: Test 182, \_SB_.PCI0.GFX0.DP2_._DGS correctly returned an integer.
PASSED: Test 182, \_SB_.PCI0.GFX0.DP3_._DGS correctly returned an integer.

Test 183 of 191: Test _DOD (Enumerate All Devices Attached to Display Adapter).
Device 0:
  Instance:                0
  Display port attachment: 0
  Type of display:         1 (VGA, CRT or VESA Compatible Analog Monitor)
  BIOS can detect device:  0
  Non-VGA device:          0
  Head or pipe ID:         0
Device 1:
  Instance:                0
  Display port attachment: 0
  Type of display:         4 (Internal/Integrated Digital Flat Panel)
  BIOS can detect device:  0
  Non-VGA device:          0
  Head or pipe ID:         0
Device 2:
  Instance:                2
  Display port attachment: 0
  Type of display:         3 (External Digital Monitor)
  BIOS can detect device:  0
  Non-VGA device:          0
  Head or pipe ID:         0
Device 3:
  Instance:                3
  Display port attachment: 0
  Type of display:         3 (External Digital Monitor)
  BIOS can detect device:  0
  Non-VGA device:          0
  Head or pipe ID:         0
Device 4:
  Instance:                0
  Display port attachment: 0
  Type of display:         3 (External Digital Monitor)
  BIOS can detect device:  0
  Non-VGA device:          0
  Head or pipe ID:         0
Device 5:
  Instance:                1
  Display port attachment: 0
  Type of display:         3 (External Digital Monitor)
  BIOS can detect device:  0
  Non-VGA device:          0
  Head or pipe ID:         0
Device 6:
  Instance:                4
  Display port attachment: 0
  Type of display:         3 (External Digital Monitor)
  BIOS can detect device:  0
  Non-VGA device:          0
  Head or pipe ID:         0
Device 7:
  Instance:                5
  Display port attachment: 0
  Type of display:         3 (External Digital Monitor)
  BIOS can detect device:  0
  Non-VGA device:          0
  Head or pipe ID:         0
PASSED: Test 183, \_SB_.PCI0.GFX0._DOD correctly returned a sane looking
package.

Test 184 of 191: Test _DOS (Enable/Disable Output Switching).
PASSED: Test 184, \_SB_.PCI0.GFX0._DOS returned no values as expected.

Test 185 of 191: Test _GPD (Get POST Device).
SKIPPED: Test 185, Skipping test for non-existant object _GPD.

Test 186 of 191: Test _ROM (Get ROM Data).
SKIPPED: Test 186, Skipping test for non-existant object _ROM.

Test 187 of 191: Test _SPD (Set POST Device).
SKIPPED: Test 187, Skipping test for non-existant object _SPD.

Test 188 of 191: Test _VPO (Video POST Options).
SKIPPED: Test 188, Skipping test for non-existant object _VPO.

Test 189 of 191: Test _CBA (Configuration Base Address).
SKIPPED: Test 189, Skipping test for non-existant object _CBA.

Test 190 of 191: Test _IFT (IPMI Interface Type).
SKIPPED: Test 190, Skipping test for non-existant object _IFT.

Test 191 of 191: Test _SRV (IPMI Interface Revision).
SKIPPED: Test 191, Skipping test for non-existant object _SRV.

================================================================================
525 passed, 13 failed, 0 warning, 0 aborted, 150 skipped, 0 info only.
================================================================================

msdm: MSDM Microsoft Data Management Table test.
--------------------------------------------------------------------------------
Test 1 of 1: MSDM Microsoft Data Management Table test.
  Reserved:                 0x00000000
  Data Type:                0x00000001
  Data Reserved:            0x00000000
  Data Length:              0x0000001d
  Data:                     'WNFPF-6T86K-2YBMD-WJ4TP-27HQ2'
MSDM has had minimal check due to proprietary nature of the table
PASSED: Test 1, No issues found in MSDM table.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

mchi: MCHI Management Controller Host Interface Table test.
--------------------------------------------------------------------------------
ACPI MCHI table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

mcfg: MCFG PCI Express* memory mapped config space test.
--------------------------------------------------------------------------------
Test 1 of 2: Validate MCFG table.
This test tries to validate the MCFG table by comparing the first 16 bytes in
the MMIO mapped config space with the 'traditional' config space of the first
PCI device (root bridge). The MCFG data is only trusted if it is marked reserved
in the Int 15 AX=E820 BIOS memory map

Memory Map Layout
-----------------
0x0000000000000000 - 0x00000000000913ff (System RAM)
0x0000000000091400 - 0x000000000009ffff (reserved)
0x00000000000e0000 - 0x00000000000fffff (reserved)
0x0000000000100000 - 0x00000000d0262fff (System RAM)
0x00000000d0263000 - 0x00000000d0269fff (ACPI Non-volatile Storage)
0x00000000d026a000 - 0x00000000d0c64fff (System RAM)
0x00000000d0c65000 - 0x00000000d1137fff (reserved)
0x00000000d1138000 - 0x00000000d7db2fff (System RAM)
0x00000000d7db3000 - 0x00000000d7ffffff (reserved)
0x00000000d8000000 - 0x00000000d8758fff (System RAM)
0x00000000d8759000 - 0x00000000d87fffff (reserved)
0x00000000d8800000 - 0x00000000d8facfff (System RAM)
0x00000000d8fad000 - 0x00000000d8ffffff (ACPI Non-volatile Storage)
0x00000000d9000000 - 0x00000000da71bfff (System RAM)
0x00000000da71c000 - 0x00000000da7fffff (ACPI Non-volatile Storage)
0x00000000da800000 - 0x00000000dbcecfff (System RAM)
0x00000000dbced000 - 0x00000000dbffffff (reserved)
0x00000000dd000000 - 0x00000000df1fffff (reserved)
0x00000000f8000000 - 0x00000000fbffffff (reserved)
0x00000000fec00000 - 0x00000000fec00fff (reserved)
0x00000000fed00000 - 0x00000000fed03fff (reserved)
0x00000000fed1c000 - 0x00000000fed1ffff (reserved)
0x00000000fee00000 - 0x00000000fee00fff (reserved)
0x00000000ff000000 - 0x00000000ffffffff (reserved)
0x0000000100000000 - 0x000000021edfffff (System RAM)

MCFG table found, size is 16 bytes (excluding header) (1 entries).
Configuration Entry #0:
  Base Address  : 0xf8000000
  Segment       : 0
  Start bus     : 0
  End bus       : 63
PASSED: Test 1, MCFG MMIO config space is reserved in memory map table.

Test 2 of 2: Validate MCFG PCI config space.
PASSED: Test 2, PCI config space verified.

================================================================================
2 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

madt: MADT Multiple APIC Description Table test.
--------------------------------------------------------------------------------
Test 1 of 1: MADT Multiple APIC Description Table test.
PASSED: Test 1, No issues found in MADT table.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

lpit: LPIT Low Power Idle Table test.
--------------------------------------------------------------------------------
Test 1 of 1: LPIT Low Power Idle Table test.
Native C-state based LPI structure:
  Type:                     0x00000000
  Length:                   0x00000038
  ID:                       0x0000
  Reserved:                 0x0000
  Flags:                    0x00000000
  Entry Trigger:
    Address Space ID:       0x7f
    Register Bit Width      0x01
    Register Bit Offset     0x02
    Access Size             0x00
    Address                 0x0000000000000060
  Residency:                0x00007530
  Latency:                  0x00000bb8
  Residency Counter:
    Address Space ID:       0x7f
    Register Bit Width      0x40
    Register Bit Offset     0x00
    Access Size             0x00
    Address                 0x0000000000000632
  Residency Counter Freq:   0x0000000000000000

PASSED: Test 1, No issues found in LPIT table.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

iort: IORT IO Remapping Table test.
--------------------------------------------------------------------------------
ACPI IORT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

hpet: HPET IA-PC High Precision Event Timer Table tests.
--------------------------------------------------------------------------------
Test 1 of 4: Test HPET base in kernel log.
This test checks the HPET PCI BAR for each timer block in the timer. The base
address is passed by the firmware via an ACPI table. IRQ routing and
initialization is also verified by the test.
PASSED: Test 1, Found HPET base 0xfed00000 in kernel log.

Test 2 of 4: Test HPET base in HPET table.
Hardware ID of Event Block:
  PCI Vendor ID              : 0x8086
  Legacy IRQ Routing Capable : 1
  COUNT_SIZE_CAP counter size: 1
  Number of comparitors      : 7
  Hardwre Revision ID        : 0x1
Lower 32 bit base Address    : 0xfed00000
  Address Space ID           : 0x0
  Register Bit Width         : 0x40
  Register Bit Offset        : 0x0
  Address Width              : 0x0
HPET sequence number         : 0x0
Minimum clock tick           : 0x37ee
Page Protection              : 0x0 (No guaranteed protection)
OEM attributes               : 0x0
PASSED: Test 2, HPET looks sane.

Test 3 of 4: Test HPET base in DSDT and/or SSDT.
PASSED: Test 3, HPET base matches that between DSDT and the kernel (0xfed00000).

Test 4 of 4: Test HPET configuration.
PASSED: Test 4, Vendor ID looks sane: 0x8086.
PASSED: Test 4, Valid clock period 69841279.

================================================================================
5 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

hest: HEST Hardware Error Source Table test.
--------------------------------------------------------------------------------
ACPI HEST table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

gtdt: GTDT Generic Timer Description Table test.
--------------------------------------------------------------------------------
ACPI GTDT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

fpdt: FPDT Firmware Performance Data Table test.
--------------------------------------------------------------------------------
Test 1 of 1: FPDT Firmware Performance Data Table test.
  S3 Performance Table Pointer Record:
    Perf Rec Type:	0x0001
    Rec Length:	0x10
    Revision:	0x01
    Reserved:	0x00000000
    S3PT Pointer:	0x00000000d7f5f018
Note: currently fwts does not check S3PT validity and the associated data
    Firmware Basic Boot Performance Pointer Record:
    Perf Rec Type:	0x0000
    Rec Length:	0x10
    Revision:	0x01
    Reserved:	0x00000000
    FBPT Pointer:	0x00000000d7f5f038
Note: currently fwts does not check FBPT validity and the associated data
PASSED: Test 1, No issues found in FPDT table.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

fan: Simple fan tests.
--------------------------------------------------------------------------------
Test 1 of 2: Test fan status.
Test how many fans there are in the system. Check for the current status of the
fan(s).
PASSED: Test 1, Fan cooling_device0 of type Processor has max cooling state 3
and current cooling state 0.
PASSED: Test 1, Fan cooling_device1 of type Processor has max cooling state 3
and current cooling state 0.
PASSED: Test 1, Fan cooling_device2 of type Processor has max cooling state 3
and current cooling state 0.
PASSED: Test 1, Fan cooling_device3 of type Processor has max cooling state 3
and current cooling state 0.
FAILED [MEDIUM] NoFanCurState: Test 1, Fan present but has no cur_state present.

Test 2 of 2: Load system, check CPU fan status.
Test how many fans there are in the system. Check for the current status of the
fan(s).
Loading CPUs for 20 seconds to try and get fan speeds to change.
Fan cooling_device0 current state did not change from value 0 while CPUs were
busy.
Fan cooling_device1 current state did not change from value 0 while CPUs were
busy.
Fan cooling_device2 current state did not change from value 0 while CPUs were
busy.
Fan cooling_device3 current state did not change from value 0 while CPUs were
busy.

ADVICE: Did not detect any change in the CPU related thermal cooling device
states. It could be that the devices are returning static information back to
the driver and/or the fan speed is automatically being controlled by firmware
using System Management Mode in which case the kernel interfaces being examined
may not work anyway.


================================================================================
4 passed, 1 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

fadt: FADT Fixed ACPI Description Table tests.
--------------------------------------------------------------------------------
Test 1 of 3: Test FADT ACPI Description Table tests.
PASSED: Test 1, No issues found in FADT table.

Test 2 of 3: Test FADT SCI_EN bit is enabled.
FADT Preferred PM Profile: 2 (Mobile) 
FADT is greater than ACPI version 1.0
PASSED: Test 2, SCI_EN bit in PM1a Control Register Block is enabled.

Test 3 of 3: Test FADT reset register.
PASSED: Test 3, FADT reset register width is 8 bits wide as expected.
PASSED: Test 3, FADT register bit offset is 0 as expected.

================================================================================
4 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

facs: FACS Firmware ACPI Control Structure test.
--------------------------------------------------------------------------------
Test 1 of 1: FACS Firmware ACPI Control Structure test.
FACS Firmware ACPI Control Structure:
  Signature:                'FACS'
  Length:                   0x00000040
  Hardware Signature:       0x0000005e
  Firmware Waking Vector:   0x00000000
  Global Lock:              0x00000000
  Flags:                    0x00000000
  X-Firmware Waking Vector: 0x0000000000000000
  Version:                  0x02
  Reserved:                 0x00 0x00 0x00
  OSPM Flags:               0x00000000
  Reserved:                 0x00 0x00 0x00 0x00
  Reserved:                 0x00 0x00 0x00 0x00
  Reserved:                 0x00 0x00 0x00 0x00
  Reserved:                 0x00 0x00 0x00 0x00
  Reserved:                 0x00 0x00 0x00 0x00
  Reserved:                 0x00 0x00 0x00 0x00
PASSED: Test 1, No issues found in FACS table.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

erst: ERST Error Record Serialization Table test.
--------------------------------------------------------------------------------
ACPI ERST table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

ecdt: ECDT Embedded Controller Boot Resources Table test.
--------------------------------------------------------------------------------
ACPI ECDT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

dmar: DMA Remapping (VT-d) test.
--------------------------------------------------------------------------------
Test 1 of 1: DMA Remapping test.
PASSED: Test 1, DMAR ACPI table has passed test.
PASSED: Test 1, Found no DMAR errors in kernel log.

================================================================================
2 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

dbg2: DBG2 (Debug Port Table 2) test.
--------------------------------------------------------------------------------
ACPI DBG2 table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

dbgp: DBGP (Debug Port) Table test.
--------------------------------------------------------------------------------
ACPI DBGP table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

cstates: Processor C state support test.
--------------------------------------------------------------------------------
Test 1 of 1: Test all CPUs C-states.
This test checks if all processors have the same number of C-states, if the
C-state counter works and if C-state transitions happen.
Processor 0 has not reached C6 during tests. This is not a failure, however it
is not a complete and thorough test.
Processor 1 has not reached C1 C3 C6 C7 C8 during tests. This is not a failure,
however it is not a complete and thorough test.
PASSED: Test 1, Processor 1 has the same number of C-states as processor 0
Processor 2 has not reached C1 during tests. This is not a failure, however it
is not a complete and thorough test.
PASSED: Test 1, Processor 2 has the same number of C-states as processor 0
Processor 3 has not reached C1 C3 C6 C7 C8 C9 during tests. This is not a
failure, however it is not a complete and thorough test.
PASSED: Test 1, Processor 3 has the same number of C-states as processor 0

================================================================================
3 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

csrt: CSRT Core System Resource Table test.
--------------------------------------------------------------------------------
ACPI CSRT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

cpep: CPEP Corrected Platform Error Polling Table test.
--------------------------------------------------------------------------------
ACPI CPEP table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

checksum: ACPI table checksum test.
--------------------------------------------------------------------------------
Test 1 of 1: ACPI table checksum test.
PASSED: Test 1, Table RSDP has correct checksum 0xe1.
PASSED: Test 1, Table RSDP has correct extended checksum 0xd7.
PASSED: Test 1, Table XSDT has correct checksum 0xe1
PASSED: Test 1, Table DSDT has correct checksum 0xc9
PASSED: Test 1, Table FACP has correct checksum 0x66
PASSED: Test 1, Table APIC has correct checksum 0x33
PASSED: Test 1, Table FPDT has correct checksum 0x95
PASSED: Test 1, Table SLIC has correct checksum 0x6a
PASSED: Test 1, Table LPIT has correct checksum 0x16
PASSED: Test 1, Table SSDT has correct checksum 0xaf
PASSED: Test 1, Table SSDT has correct checksum 0x3a
PASSED: Test 1, Table SSDT has correct checksum 0xdf
PASSED: Test 1, Table SSDT has correct checksum 0x36
PASSED: Test 1, Table HPET has correct checksum 0xa9
PASSED: Test 1, Table SSDT has correct checksum 0xa7
PASSED: Test 1, Table MCFG has correct checksum 0x9c
PASSED: Test 1, Table ASF! has correct checksum 0xb8
PASSED: Test 1, Table MSDM has correct checksum 0xad
PASSED: Test 1, Table DMAR has correct checksum 0x64
PASSED: Test 1, Table RSDT has correct checksum 0x02
PASSED: Test 1, Table FACP has correct checksum 0x55

================================================================================
21 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

autobrightness: Automated LCD brightness test.
--------------------------------------------------------------------------------
Test 1 of 2: Test for maximum and actual brightness.
PASSED: Test 1, Maximum brightness for intel_backlight is 937 which is sane.
PASSED: Test 1, Actual brightness for intel_backlight is 470 which is in range
0..937.

Test 2 of 2: Change actual brightness.
FAILED [MEDIUM] BrightnessMismatch: Test 2, 37 brightness levels did not match
the brightnesss level just set for backlight intel_backlight.
The failed brightness levels were: 13 38 63 89 114 139 165 190 215 241 266 291
317 342 367 393 418 443 468 494 519 544 570 595 620 646 671 696 722 747 772 798
823 848 874 899 924.

================================================================================
2 passed, 1 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

boot: BOOT Table test.
--------------------------------------------------------------------------------
ACPI BOOT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

bgrt: BGRT Boot Graphics Resource Table test.
--------------------------------------------------------------------------------
ACPI BGRT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

bert: BERT Boot Error Record Table test.
--------------------------------------------------------------------------------
ACPI BERT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

aspt: ASPT Table test.
--------------------------------------------------------------------------------
ACPI ASPT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

asf: ASF! Alert Standard Format Table test.
--------------------------------------------------------------------------------
Test 1 of 1: ASF! Alert Standard Format Table test.
ASF! Hardware Error Source Table
PASSED: Test 1, No issues found in ASF! ASF_INFO record.
PASSED: Test 1, No issues found in ASF! ASF_ALRT record.
PASSED: Test 1, No issues found in ASF! ASF_RCTL record.
PASSED: Test 1, No issues found in ASF! ASF_RMCP record.
PASSED: Test 1, No issues found in ASF! ASF_ADDR record.
PASSED: Test 1, No issues found in ASF! table.

================================================================================
6 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

apicinstance: Test for single instance of APIC/MADT table.
--------------------------------------------------------------------------------
Test 1 of 1: Test for single instance of APIC/MADT table.
Found APIC/MADT table APIC @ d8fe9370, length 0x114 
PASSED: Test 1, Found 1 APIC/MADT table(s), as expected.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

acpitables: ACPI table headers sanity tests.
--------------------------------------------------------------------------------
Test 1 of 1: Test ACPI headers.
PASSED: Test 1, Table XSDT has valid signature and ID strings.
PASSED: Test 1, Table DSDT has valid signature and ID strings.
PASSED: Test 1, Table FACP has valid signature and ID strings.
PASSED: Test 1, Table APIC has valid signature and ID strings.
PASSED: Test 1, Table FPDT has valid signature and ID strings.
PASSED: Test 1, Table SLIC has valid signature and ID strings.
PASSED: Test 1, Table LPIT has valid signature and ID strings.
PASSED: Test 1, Table SSDT has valid signature and ID strings.
PASSED: Test 1, Table SSDT has valid signature and ID strings.
PASSED: Test 1, Table SSDT has valid signature and ID strings.
PASSED: Test 1, Table SSDT has valid signature and ID strings.
PASSED: Test 1, Table HPET has valid signature and ID strings.
PASSED: Test 1, Table SSDT has valid signature and ID strings.
PASSED: Test 1, Table MCFG has valid signature and ID strings.
PASSED: Test 1, Table ASF! has valid signature and ID strings.
PASSED: Test 1, Table MSDM has valid signature and ID strings.
PASSED: Test 1, Table DMAR has valid signature and ID strings.
PASSED: Test 1, Table RSDT has valid signature and ID strings.
PASSED: Test 1, Table FACP has valid signature and ID strings.

================================================================================
19 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================


853 passed, 119 failed, 7 warnings, 62 aborted, 179 skipped, 10 info only.

Test Failure Summary
================================================================================

Critical failures: NONE

High failures: 37
 syntaxcheck: Assembler error in line 2280
 syntaxcheck: Assembler error in line 2284
 syntaxcheck: Assembler error in line 2290
 syntaxcheck: Assembler error in line 2296
 syntaxcheck: Assembler error in line 4449
 syntaxcheck: Assembler error in line 4582
 syntaxcheck: Assembler error in line 4586
 syntaxcheck: Compilation aborted early due to a parser detected syntax error.
 syntaxcheck: Assembler error in line 221
 syntaxcheck: Assembler error in line 241
 syntaxcheck: Assembler error in line 242
 syntaxcheck: Assembler error in line 261
 syntaxcheck: Assembler error in line 262
 syntaxcheck: Assembler error in line 281
 syntaxcheck: Assembler error in line 282
 syntaxcheck: Assembler error in line 301
 syntaxcheck: Assembler error in line 302
 syntaxcheck: Assembler error in line 321
 syntaxcheck: Assembler error in line 322
 syntaxcheck: Assembler error in line 341
 syntaxcheck: Assembler error in line 342
 syntaxcheck: Assembler error in line 361
 syntaxcheck: Assembler error in line 362
 syntaxcheck: Assembler error in line 381
 syntaxcheck: Assembler error in line 422
 method: Detected error 'No return value' when evaluating '\_SB_.PCI0.XHC_.RHUB.HS10._PLD'.
 method: Detected error 'No return value' when evaluating '\_SB_.PCI0.XHC_.RHUB.HS11._PLD'.
 method: Detected error 'No return value' when evaluating '\_SB_.PCI0.XHC_.RHUB.HS12._PLD'.
 method: Detected error 'No return value' when evaluating '\_SB_.PCI0.XHC_.RHUB.HS13._PLD'.
 method: Detected error 'No return value' when evaluating '\_SB_.PCI0.XHC_.RHUB.HS14._PLD'.
 method: Detected error 'No return value' when evaluating '\_SB_.PCI0.XHC_.RHUB.HS15._PLD'.
 method: Detected error 'No return value' when evaluating '\_SB_.PCI0.XHC_.RHUB.HS10._UPC'.
 method: Detected error 'No return value' when evaluating '\_SB_.PCI0.XHC_.RHUB.HS11._UPC'.
 method: Detected error 'No return value' when evaluating '\_SB_.PCI0.XHC_.RHUB.HS12._UPC'.
 method: Detected error 'No return value' when evaluating '\_SB_.PCI0.XHC_.RHUB.HS13._UPC'.
 method: Detected error 'No return value' when evaluating '\_SB_.PCI0.XHC_.RHUB.HS14._UPC'.
 method: Detected error 'No return value' when evaluating '\_SB_.PCI0.XHC_.RHUB.HS15._UPC'.

Medium failures: 18
 cpufreq: CPU max frequency is unreachable
 cpufreq: Can't set CPU frequencies
 apicedge: Non-Legacy interrupt 0 is incorrectly level triggered.
 apicedge: Non-Legacy interrupt 1 is incorrectly level triggered.
 apicedge: Non-Legacy interrupt 8 is incorrectly level triggered.
 apicedge: Non-Legacy interrupt 12 is incorrectly level triggered.
 syntaxcheck: Assembler warning in line 123
 syntaxcheck: Assembler warning in line 216
 syntaxcheck: Assembler warning in line 283
 syntaxcheck: Assembler warning in line 330
 syntaxcheck: Assembler warning in line 377
 syntaxcheck: Assembler warning in line 424
 syntaxcheck: Assembler warning in line 471
 syntaxcheck: Assembler warning in line 518
 syntaxcheck: Assembler warning in line 68
 method: \_PR_.CPU0._PCT returned a NULL object, and did not return ACPI_TYPE_PACKAGE.
 fan: Fan present but has no cur_state present.
 autobrightness: 37 brightness levels did not match the brightnesss level just set for backlight intel_backlight.

Low failures: 62
 maxreadreq: 1 devices have low MaxReadReq settings. Firmware may have configured these too low.
 dmicheck: String index 0x05 in table entry 'Chassis Information (Type 3)' @ 0x000ed226, field 'SKU Number', offset 0x15 has a default value 'To be filled by O.E.M.' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x04 in table entry 'Processor Information (Type 4)' @ 0x000ed26a, field 'Asset Tag', offset 0x21 has a default value 'Fill By OEM' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x05 in table entry 'Processor Information (Type 4)' @ 0x000ed26a, field 'Part Number', offset 0x22 has a default value 'Fill By OEM' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x01 in table entry 'System Configuration Options (Type 12)' @ 0x000ed6a1, field 'Option 1', offset 0x04 has a default value 'To Be Filled By O.E.M.' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x02 in table entry 'Memory Device (Type 17)' @ 0x000ed780, field 'Manufacturer', offset 0x17 has a default value '[Empty]' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x03 in table entry 'Memory Device (Type 17)' @ 0x000ed780, field 'Serial Number', offset 0x18 has a default value '[Empty]' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x04 in table entry 'Memory Device (Type 17)' @ 0x000ed780, field 'Asset Tag', offset 0x19 has a default value '00000000' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x05 in table entry 'Memory Device (Type 17)' @ 0x000ed780, field 'Part Number', offset 0x1a has a default value '[Empty]' and probably has not been updated by the BIOS vendor.
 mpcheck: IO Interrupt Entry 8 (@0x000fd794) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 9 (@0x000fd79c) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 10 (@0x000fd7a4) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 11 (@0x000fd7ac) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 12 (@0x000fd7b4) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 13 (@0x000fd7bc) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 14 (@0x000fd7c4) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 15 (@0x000fd7cc) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 16 (@0x000fd7d4) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 17 (@0x000fd7dc) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 18 (@0x000fd7e4) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 19 (@0x000fd7ec) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 20 (@0x000fd7f4) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 21 (@0x000fd7fc) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 22 (@0x000fd804) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 23 (@0x000fd80c) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 24 (@0x000fd814) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 25 (@0x000fd81c) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 26 (@0x000fd824) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 27 (@0x000fd82c) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 28 (@0x000fd834) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 29 (@0x000fd83c) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 30 (@0x000fd844) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 31 (@0x000fd84c) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 32 (@0x000fd854) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 33 (@0x000fd85c) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 34 (@0x000fd864) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 35 (@0x000fd86c) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 36 (@0x000fd874) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 37 (@0x000fd87c) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 38 (@0x000fd884) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 39 (@0x000fd88c) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 40 (@0x000fd894) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 41 (@0x000fd89c) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 42 (@0x000fd8a4) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 43 (@0x000fd8ac) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 44 (@0x000fd8b4) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 45 (@0x000fd8bc) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 46 (@0x000fd8c4) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 47 (@0x000fd8cc) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 48 (@0x000fd8d4) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 49 (@0x000fd8dc) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 50 (@0x000fd8e4) has a Destination IO APIC ID 0x02 which has not been defined.
 mpcheck: IO Interrupt Entry 51 (@0x000fd8ec) has a Destination IO APIC ID 0x02 which has not been defined.
 syntaxcheck: Assembler remark in line 36
 syntaxcheck: Assembler remark in line 133
 syntaxcheck: Assembler remark in line 148
 syntaxcheck: Assembler remark in line 151
 syntaxcheck: Assembler remark in line 177
 syntaxcheck: Assembler remark in line 256
 syntaxcheck: Assembler remark in line 266
 syntaxcheck: Assembler remark in line 99
 syntaxcheck: Assembler remark in line 149

Other failures: NONE

Test           |Pass |Fail |Abort|Warn |Skip |Info |
---------------+-----+-----+-----+-----+-----+-----+
acpiinfo       |     |     |     |     |     |    3|
acpitables     |   19|     |     |     |     |     |
apicedge       |     |    4|     |     |     |     |
apicinstance   |    1|     |     |     |     |     |
asf            |    6|     |     |     |     |     |
aspm           |    2|     |     |    2|     |     |
aspt           |     |     |     |     |    1|     |
autobrightness |    2|    1|     |     |     |     |
bert           |     |     |     |     |    1|     |
bgrt           |     |     |     |     |    1|     |
bios32         |     |     |     |     |     |     |
bios_info      |     |     |     |     |     |    1|
boot           |     |     |     |     |    1|     |
checksum       |   21|     |     |     |     |     |
cpep           |     |     |     |     |    1|     |
cpufreq        |    3|    2|     |    4|    2|     |
crs            |    1|     |     |     |     |     |
csm            |     |     |     |     |     |    1|
csrt           |     |     |     |     |    1|     |
cstates        |    3|     |     |     |     |     |
dbg2           |     |     |     |     |    1|     |
dbgp           |     |     |     |     |    1|     |
dmar           |    2|     |     |     |     |     |
dmicheck       |   98|    8|     |     |    1|     |
ebda           |    1|     |     |     |     |     |
ecdt           |     |     |     |     |    1|     |
erst           |     |     |     |     |    1|     |
facs           |    1|     |     |     |     |     |
fadt           |    4|     |     |     |     |     |
fan            |    4|    1|     |     |     |     |
fpdt           |    1|     |     |     |     |     |
gtdt           |     |     |     |     |    1|     |
hda_audio      |    1|     |     |     |     |     |
hest           |     |     |     |     |    1|     |
hpet           |    5|     |     |     |     |     |
iort           |     |     |     |     |    1|     |
klog           |    1|     |     |     |     |     |
lpit           |    1|     |     |     |     |     |
madt           |    1|     |     |     |     |     |
maxfreq        |    1|     |     |     |     |     |
maxreadreq     |     |    1|     |     |     |     |
mcfg           |    2|     |     |     |     |     |
mchi           |     |     |     |     |    1|     |
method         |  525|   13|     |     |  150|     |
microcode      |     |     |     |     |    1|     |
mpcheck        |    8|   44|     |     |     |     |
msdm           |    1|     |     |     |     |     |
msr            |  114|     |     |     |     |     |
mtrr           |    2|     |     |     |    1|     |
nx             |    3|     |     |     |     |     |
oops           |    2|     |     |     |     |     |
osilinux       |     |     |     |    1|     |     |
pcc            |     |     |     |     |     |    1|
pciirq         |    4|     |     |     |     |     |
pnp            |    2|     |     |     |     |     |
rsdp           |    1|     |     |     |     |     |
rsdt           |    1|     |     |     |     |     |
sbst           |     |     |     |     |    1|     |
securebootcert |     |     |     |     |    1|     |
slic           |    1|     |     |     |     |     |
slit           |     |     |     |     |    1|     |
spcr           |     |     |     |     |    1|     |
spmi           |     |     |     |     |    1|     |
srat           |     |     |     |     |    1|     |
stao           |     |     |     |     |    1|     |
syntaxcheck    |     |   45|     |     |     |     |
tcpa           |     |     |    1|     |     |     |
tpm2           |     |     |    1|     |     |     |
uefi           |     |     |     |     |    1|     |
uefibootpath   |     |     |    1|     |     |     |
uefirtauthvar  |     |     |   12|     |     |     |
uefirtmisc     |     |     |    3|     |     |     |
uefirttime     |     |     |   35|     |     |     |
uefirtvariable |     |     |    8|     |     |     |
version        |     |     |     |     |     |    4|
virt           |    1|     |     |     |     |     |
waet           |     |     |     |     |    1|     |
wakealarm      |    4|     |     |     |     |     |
wdat           |     |     |     |     |    1|     |
wmi            |    2|     |     |     |     |     |
xenv           |     |     |    1|     |     |     |
xsdt           |    1|     |     |     |     |     |
---------------+-----+-----+-----+-----+-----+-----+
Total:         |  853|  119|   62|    7|  179|   10|
---------------+-----+-----+-----+-----+-----+-----+
